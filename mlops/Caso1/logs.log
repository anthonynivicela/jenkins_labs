2025-06-11 19:49:15,393:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:49:15,393:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:49:15,393:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:49:15,393:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:49:16,904:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 19:49:19,299:INFO:PyCaret ClassificationExperiment
2025-06-11 19:49:19,299:INFO:Logging name: riesgo_credito_multiclase
2025-06-11 19:49:19,299:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-06-11 19:49:19,299:INFO:version 3.2.0
2025-06-11 19:49:19,299:INFO:Initializing setup()
2025-06-11 19:49:19,299:INFO:self.USI: 0b5c
2025-06-11 19:49:19,299:INFO:self._variable_keys: {'gpu_n_jobs_param', 'memory', 'pipeline', 'logging_param', 'html_param', 'fold_groups_param', 'log_plots_param', 'gpu_param', 'y_train', '_available_plots', 'USI', 'fold_shuffle_param', 'y', 'idx', 'fix_imbalance', 'exp_name_log', 'X_test', 'X', 'target_param', 'is_multiclass', 'n_jobs_param', 'X_train', '_ml_usecase', 'fold_generator', 'seed', 'exp_id', 'y_test', 'data'}
2025-06-11 19:49:19,299:INFO:Checking environment
2025-06-11 19:49:19,299:INFO:python_version: 3.11.0
2025-06-11 19:49:19,299:INFO:python_build: ('main', 'Oct 24 2022 18:26:48')
2025-06-11 19:49:19,299:INFO:machine: AMD64
2025-06-11 19:49:19,315:INFO:platform: Windows-10-10.0.26100-SP0
2025-06-11 19:49:19,323:INFO:Memory: svmem(total=102695145472, available=79462006784, percent=22.6, used=23233138688, free=79462006784)
2025-06-11 19:49:19,323:INFO:Physical Core: 16
2025-06-11 19:49:19,323:INFO:Logical Core: 32
2025-06-11 19:49:19,323:INFO:Checking libraries
2025-06-11 19:49:19,323:INFO:System:
2025-06-11 19:49:19,323:INFO:    python: 3.11.0 (main, Oct 24 2022, 18:26:48) [MSC v.1933 64 bit (AMD64)]
2025-06-11 19:49:19,323:INFO:executable: C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\python.exe
2025-06-11 19:49:19,323:INFO:   machine: Windows-10-10.0.26100-SP0
2025-06-11 19:49:19,323:INFO:PyCaret required dependencies:
2025-06-11 19:49:19,447:INFO:                 pip: 22.3
2025-06-11 19:49:19,447:INFO:          setuptools: 65.5.0
2025-06-11 19:49:19,447:INFO:             pycaret: 3.2.0
2025-06-11 19:49:19,447:INFO:             IPython: 9.1.0
2025-06-11 19:49:19,447:INFO:          ipywidgets: 8.1.7
2025-06-11 19:49:19,447:INFO:                tqdm: 4.67.1
2025-06-11 19:49:19,447:INFO:               numpy: 1.25.2
2025-06-11 19:49:19,447:INFO:              pandas: 1.5.3
2025-06-11 19:49:19,447:INFO:              jinja2: 3.1.6
2025-06-11 19:49:19,447:INFO:               scipy: 1.10.1
2025-06-11 19:49:19,447:INFO:              joblib: 1.3.2
2025-06-11 19:49:19,447:INFO:             sklearn: 1.2.2
2025-06-11 19:49:19,447:INFO:                pyod: 2.0.5
2025-06-11 19:49:19,447:INFO:            imblearn: 0.12.4
2025-06-11 19:49:19,447:INFO:   category_encoders: 2.7.0
2025-06-11 19:49:19,447:INFO:            lightgbm: 4.6.0
2025-06-11 19:49:19,447:INFO:               numba: 0.61.0
2025-06-11 19:49:19,447:INFO:            requests: 2.32.3
2025-06-11 19:49:19,447:INFO:          matplotlib: 3.6.0
2025-06-11 19:49:19,447:INFO:          scikitplot: 0.3.7
2025-06-11 19:49:19,447:INFO:         yellowbrick: 1.5
2025-06-11 19:49:19,447:INFO:              plotly: 5.24.1
2025-06-11 19:49:19,447:INFO:    plotly-resampler: Not installed
2025-06-11 19:49:19,447:INFO:             kaleido: 0.2.1
2025-06-11 19:49:19,447:INFO:           schemdraw: 0.15
2025-06-11 19:49:19,447:INFO:         statsmodels: 0.14.4
2025-06-11 19:49:19,447:INFO:              sktime: 0.21.1
2025-06-11 19:49:19,447:INFO:               tbats: 1.1.3
2025-06-11 19:49:19,447:INFO:            pmdarima: 2.0.4
2025-06-11 19:49:19,447:INFO:              psutil: 7.0.0
2025-06-11 19:49:19,447:INFO:          markupsafe: 3.0.2
2025-06-11 19:49:19,448:INFO:             pickle5: Not installed
2025-06-11 19:49:19,448:INFO:         cloudpickle: 2.2.1
2025-06-11 19:49:19,448:INFO:         deprecation: 2.1.0
2025-06-11 19:49:19,448:INFO:              xxhash: 3.5.0
2025-06-11 19:49:19,448:INFO:           wurlitzer: Not installed
2025-06-11 19:49:19,448:INFO:PyCaret optional dependencies:
2025-06-11 19:49:19,897:INFO:                shap: 0.44.1
2025-06-11 19:49:19,897:INFO:           interpret: 0.6.10
2025-06-11 19:49:19,897:INFO:                umap: 0.5.7
2025-06-11 19:49:19,897:INFO:     ydata_profiling: 4.16.1
2025-06-11 19:49:19,897:INFO:  explainerdashboard: 0.4.8
2025-06-11 19:49:19,897:INFO:             autoviz: Not installed
2025-06-11 19:49:19,897:INFO:           fairlearn: 0.7.0
2025-06-11 19:49:19,897:INFO:          deepchecks: Not installed
2025-06-11 19:49:19,897:INFO:             xgboost: Not installed
2025-06-11 19:49:19,897:INFO:            catboost: Not installed
2025-06-11 19:49:19,897:INFO:              kmodes: Not installed
2025-06-11 19:49:19,897:INFO:             mlxtend: Not installed
2025-06-11 19:49:19,897:INFO:       statsforecast: Not installed
2025-06-11 19:49:19,897:INFO:        tune_sklearn: Not installed
2025-06-11 19:49:19,897:INFO:                 ray: Not installed
2025-06-11 19:49:19,897:INFO:            hyperopt: Not installed
2025-06-11 19:49:19,897:INFO:              optuna: Not installed
2025-06-11 19:49:19,897:INFO:               skopt: Not installed
2025-06-11 19:49:19,897:INFO:              mlflow: 2.22.0
2025-06-11 19:49:19,897:INFO:              gradio: Not installed
2025-06-11 19:49:19,897:INFO:             fastapi: 0.115.12
2025-06-11 19:49:19,897:INFO:             uvicorn: 0.34.2
2025-06-11 19:49:19,897:INFO:              m2cgen: Not installed
2025-06-11 19:49:19,897:INFO:           evidently: Not installed
2025-06-11 19:49:19,897:INFO:               fugue: Not installed
2025-06-11 19:49:19,897:INFO:           streamlit: 1.45.1
2025-06-11 19:49:19,897:INFO:             prophet: Not installed
2025-06-11 19:49:19,897:INFO:None
2025-06-11 19:49:19,897:INFO:Set up data.
2025-06-11 19:49:19,900:INFO:Set up folding strategy.
2025-06-11 19:49:19,900:INFO:Set up train/test split.
2025-06-11 19:49:19,903:INFO:Set up index.
2025-06-11 19:49:19,903:INFO:Assigning column types.
2025-06-11 19:49:19,904:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-06-11 19:49:19,923:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-11 19:49:19,927:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 19:49:19,949:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:19,949:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:19,967:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-11 19:49:19,968:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 19:49:19,979:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:19,979:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:19,979:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-06-11 19:49:19,998:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 19:49:20,009:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:20,011:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:20,029:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 19:49:20,041:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:20,041:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:20,041:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-06-11 19:49:20,071:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:20,071:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:20,101:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:20,101:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:20,102:INFO:Preparing preprocessing pipeline...
2025-06-11 19:49:20,103:INFO:Set up label encoding.
2025-06-11 19:49:20,103:INFO:Set up simple imputation.
2025-06-11 19:49:20,104:INFO:Set up encoding of categorical features.
2025-06-11 19:49:20,125:INFO:Finished creating preprocessing pipeline.
2025-06-11 19:49:20,129:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-06-11 19:49:20,129:INFO:Creating final display dataframe.
2025-06-11 19:49:20,182:INFO:Setup _display_container:                     Description                       Value
0                    Session id                         404
1                        Target                  risk_level
2                   Target type                  Multiclass
3                Target mapping  alto: 0, bajo: 1, medio: 2
4           Original data shape                   (1000, 8)
5        Transformed data shape                  (1000, 12)
6   Transformed train set shape                   (700, 12)
7    Transformed test set shape                   (300, 12)
8              Numeric features                           6
9          Categorical features                           1
10                   Preprocess                        True
11              Imputation type                      simple
12           Numeric imputation                        mean
13       Categorical imputation                        mode
14     Maximum one-hot encoding                          25
15              Encoding method                        None
16               Fold Generator             StratifiedKFold
17                  Fold Number                          10
18                     CPU Jobs                          -1
19                      Use GPU                       False
20               Log Experiment                MlflowLogger
21              Experiment Name   riesgo_credito_multiclase
22                          USI                        0b5c
2025-06-11 19:49:20,214:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:20,214:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:20,246:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:20,246:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:49:20,247:INFO:Logging experiment in loggers
2025-06-11 19:49:20,453:INFO:SubProcess save_model() called ==================================
2025-06-11 19:49:20,457:INFO:Initializing save_model()
2025-06-11 19:49:20,457:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), model_name=C:\Users\BRANGO~1\AppData\Local\Temp\tmpkwdjpjsj\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-11 19:49:20,457:INFO:Adding model into prep_pipe
2025-06-11 19:49:20,457:WARNING:Only Model saved as it was a pipeline.
2025-06-11 19:49:20,459:INFO:C:\Users\BRANGO~1\AppData\Local\Temp\tmpkwdjpjsj\Transformation Pipeline.pkl saved in current working directory
2025-06-11 19:49:20,460:INFO:Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-06-11 19:49:20,460:INFO:save_model() successfully completed......................................
2025-06-11 19:49:20,532:INFO:SubProcess save_model() end ==================================
2025-06-11 19:49:20,567:INFO:setup() successfully completed in 0.95s...............
2025-06-11 19:49:20,567:INFO:Initializing compare_models()
2025-06-11 19:49:20,567:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-06-11 19:49:20,567:INFO:Checking exceptions
2025-06-11 19:49:20,568:INFO:Preparing display monitor
2025-06-11 19:49:20,571:INFO:Initializing Logistic Regression
2025-06-11 19:49:20,571:INFO:Total runtime is 0.0 minutes
2025-06-11 19:49:20,571:INFO:SubProcess create_model() called ==================================
2025-06-11 19:49:20,571:INFO:Initializing create_model()
2025-06-11 19:49:20,571:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E8D8E0B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:20,571:INFO:Checking exceptions
2025-06-11 19:49:20,571:INFO:Importing libraries
2025-06-11 19:49:20,571:INFO:Copying training dataset
2025-06-11 19:49:20,572:INFO:Defining folds
2025-06-11 19:49:20,572:INFO:Declaring metric variables
2025-06-11 19:49:20,572:INFO:Importing untrained model
2025-06-11 19:49:20,572:INFO:Logistic Regression Imported successfully
2025-06-11 19:49:20,573:INFO:Starting cross validation
2025-06-11 19:49:20,573:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:49:22,539:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:49:22,539:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:49:22,539:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:49:22,539:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:49:22,539:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:49:22,543:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:49:22,544:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:49:22,545:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:49:22,545:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:49:22,551:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,551:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,551:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,551:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,551:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,551:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,552:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,552:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,552:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,552:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,552:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,553:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,553:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,553:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,553:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,553:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,553:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,554:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,554:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,555:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,555:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,555:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,555:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,555:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,555:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,556:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,556:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,557:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:22,569:INFO:Calculating mean and std
2025-06-11 19:49:22,570:INFO:Creating metrics dataframe
2025-06-11 19:49:22,572:INFO:Uploading results into container
2025-06-11 19:49:22,572:INFO:Uploading model into container now
2025-06-11 19:49:22,572:INFO:_master_model_container: 1
2025-06-11 19:49:22,573:INFO:_display_container: 2
2025-06-11 19:49:22,573:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=404, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-06-11 19:49:22,573:INFO:create_model() successfully completed......................................
2025-06-11 19:49:22,648:INFO:SubProcess create_model() end ==================================
2025-06-11 19:49:22,648:INFO:Creating metrics dataframe
2025-06-11 19:49:22,651:INFO:Initializing K Neighbors Classifier
2025-06-11 19:49:22,651:INFO:Total runtime is 0.03466793696085612 minutes
2025-06-11 19:49:22,651:INFO:SubProcess create_model() called ==================================
2025-06-11 19:49:22,651:INFO:Initializing create_model()
2025-06-11 19:49:22,651:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E8D8E0B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:22,651:INFO:Checking exceptions
2025-06-11 19:49:22,651:INFO:Importing libraries
2025-06-11 19:49:22,651:INFO:Copying training dataset
2025-06-11 19:49:22,652:INFO:Defining folds
2025-06-11 19:49:22,652:INFO:Declaring metric variables
2025-06-11 19:49:22,652:INFO:Importing untrained model
2025-06-11 19:49:22,652:INFO:K Neighbors Classifier Imported successfully
2025-06-11 19:49:22,652:INFO:Starting cross validation
2025-06-11 19:49:22,653:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:49:24,102:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,102:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,102:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,102:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,103:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,103:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,103:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,103:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,103:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,103:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,104:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,104:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,104:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,104:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,104:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,104:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:24,104:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,104:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:24,104:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:24,104:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,104:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,104:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:24,105:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,105:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,105:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,105:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,105:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,105:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:24,105:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,105:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,105:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:24,111:INFO:Calculating mean and std
2025-06-11 19:49:24,111:INFO:Creating metrics dataframe
2025-06-11 19:49:24,112:INFO:Uploading results into container
2025-06-11 19:49:24,112:INFO:Uploading model into container now
2025-06-11 19:49:24,112:INFO:_master_model_container: 2
2025-06-11 19:49:24,112:INFO:_display_container: 2
2025-06-11 19:49:24,113:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-06-11 19:49:24,113:INFO:create_model() successfully completed......................................
2025-06-11 19:49:24,201:INFO:SubProcess create_model() end ==================================
2025-06-11 19:49:24,201:INFO:Creating metrics dataframe
2025-06-11 19:49:24,202:INFO:Initializing Naive Bayes
2025-06-11 19:49:24,203:INFO:Total runtime is 0.06053300301233927 minutes
2025-06-11 19:49:24,203:INFO:SubProcess create_model() called ==================================
2025-06-11 19:49:24,203:INFO:Initializing create_model()
2025-06-11 19:49:24,203:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E8D8E0B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:24,203:INFO:Checking exceptions
2025-06-11 19:49:24,203:INFO:Importing libraries
2025-06-11 19:49:24,203:INFO:Copying training dataset
2025-06-11 19:49:24,204:INFO:Defining folds
2025-06-11 19:49:24,204:INFO:Declaring metric variables
2025-06-11 19:49:24,204:INFO:Importing untrained model
2025-06-11 19:49:24,204:INFO:Naive Bayes Imported successfully
2025-06-11 19:49:24,204:INFO:Starting cross validation
2025-06-11 19:49:24,204:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:49:25,532:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,533:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,534:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,542:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,543:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,543:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,556:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,556:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,557:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,557:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,557:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,557:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,558:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,570:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,571:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,572:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,582:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,582:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,583:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,584:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,584:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,585:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,585:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,587:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,587:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,587:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,588:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,589:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,597:INFO:Calculating mean and std
2025-06-11 19:49:25,597:INFO:Creating metrics dataframe
2025-06-11 19:49:25,599:INFO:Uploading results into container
2025-06-11 19:49:25,599:INFO:Uploading model into container now
2025-06-11 19:49:25,599:INFO:_master_model_container: 3
2025-06-11 19:49:25,599:INFO:_display_container: 2
2025-06-11 19:49:25,599:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-06-11 19:49:25,599:INFO:create_model() successfully completed......................................
2025-06-11 19:49:25,674:INFO:SubProcess create_model() end ==================================
2025-06-11 19:49:25,674:INFO:Creating metrics dataframe
2025-06-11 19:49:25,675:INFO:Initializing Decision Tree Classifier
2025-06-11 19:49:25,675:INFO:Total runtime is 0.0850675344467163 minutes
2025-06-11 19:49:25,675:INFO:SubProcess create_model() called ==================================
2025-06-11 19:49:25,675:INFO:Initializing create_model()
2025-06-11 19:49:25,675:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E8D8E0B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:25,675:INFO:Checking exceptions
2025-06-11 19:49:25,675:INFO:Importing libraries
2025-06-11 19:49:25,675:INFO:Copying training dataset
2025-06-11 19:49:25,676:INFO:Defining folds
2025-06-11 19:49:25,676:INFO:Declaring metric variables
2025-06-11 19:49:25,676:INFO:Importing untrained model
2025-06-11 19:49:25,676:INFO:Decision Tree Classifier Imported successfully
2025-06-11 19:49:25,676:INFO:Starting cross validation
2025-06-11 19:49:25,677:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:49:25,703:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,703:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,703:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,703:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,703:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,704:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,704:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,704:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,704:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,704:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,704:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,704:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,705:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,705:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,705:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,705:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,705:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,705:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,706:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,706:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,706:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:25,707:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,726:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,727:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,727:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,728:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,728:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,728:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,730:INFO:Calculating mean and std
2025-06-11 19:49:26,730:INFO:Creating metrics dataframe
2025-06-11 19:49:26,732:INFO:Uploading results into container
2025-06-11 19:49:26,732:INFO:Uploading model into container now
2025-06-11 19:49:26,732:INFO:_master_model_container: 4
2025-06-11 19:49:26,732:INFO:_display_container: 2
2025-06-11 19:49:26,732:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best')
2025-06-11 19:49:26,732:INFO:create_model() successfully completed......................................
2025-06-11 19:49:26,809:INFO:SubProcess create_model() end ==================================
2025-06-11 19:49:26,809:INFO:Creating metrics dataframe
2025-06-11 19:49:26,811:INFO:Initializing SVM - Linear Kernel
2025-06-11 19:49:26,811:INFO:Total runtime is 0.10400006771087646 minutes
2025-06-11 19:49:26,812:INFO:SubProcess create_model() called ==================================
2025-06-11 19:49:26,812:INFO:Initializing create_model()
2025-06-11 19:49:26,812:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E8D8E0B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:26,812:INFO:Checking exceptions
2025-06-11 19:49:26,812:INFO:Importing libraries
2025-06-11 19:49:26,812:INFO:Copying training dataset
2025-06-11 19:49:26,813:INFO:Defining folds
2025-06-11 19:49:26,813:INFO:Declaring metric variables
2025-06-11 19:49:26,813:INFO:Importing untrained model
2025-06-11 19:49:26,813:INFO:SVM - Linear Kernel Imported successfully
2025-06-11 19:49:26,813:INFO:Starting cross validation
2025-06-11 19:49:26,813:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:49:26,862:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

r, msg_start, len(result))

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,869:INFO:Calculating mean and std
2025-06-11 19:49:26,869:INFO:Creating metrics dataframe
2025-06-11 19:49:26,870:INFO:Uploading results into container
2025-06-11 19:49:26,870:INFO:Uploading model into container now
2025-06-11 19:49:26,871:INFO:_master_model_container: 5
2025-06-11 19:49:26,871:INFO:_display_container: 2
2025-06-11 19:49:26,871:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=404, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-06-11 19:49:26,871:INFO:create_model() successfully completed......................................
2025-06-11 19:49:26,947:INFO:SubProcess create_model() end ==================================
2025-06-11 19:49:26,947:INFO:Creating metrics dataframe
2025-06-11 19:49:26,949:INFO:Initializing Ridge Classifier
2025-06-11 19:49:26,949:INFO:Total runtime is 0.10630584955215454 minutes
2025-06-11 19:49:26,949:INFO:SubProcess create_model() called ==================================
2025-06-11 19:49:26,949:INFO:Initializing create_model()
2025-06-11 19:49:26,949:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E8D8E0B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:26,949:INFO:Checking exceptions
2025-06-11 19:49:26,949:INFO:Importing libraries
2025-06-11 19:49:26,949:INFO:Copying training dataset
2025-06-11 19:49:26,950:INFO:Defining folds
2025-06-11 19:49:26,950:INFO:Declaring metric variables
2025-06-11 19:49:26,950:INFO:Importing untrained model
2025-06-11 19:49:26,950:INFO:Ridge Classifier Imported successfully
2025-06-11 19:49:26,950:INFO:Starting cross validation
2025-06-11 19:49:26,950:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:49:26,978:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:49:26,978:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,978:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:49:26,978:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:49:26,978:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:49:26,979:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,979:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:49:26,979:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,979:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,979:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:49:26,979:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,979:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,979:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,979:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,979:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,979:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,979:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:49:26,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:49:26,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,982:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:49:26,982:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,982:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,982:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,982:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,982:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,983:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,983:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,983:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,984:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:26,996:INFO:Calculating mean and std
2025-06-11 19:49:26,996:INFO:Creating metrics dataframe
2025-06-11 19:49:26,997:INFO:Uploading results into container
2025-06-11 19:49:26,998:INFO:Uploading model into container now
2025-06-11 19:49:26,998:INFO:_master_model_container: 6
2025-06-11 19:49:26,998:INFO:_display_container: 2
2025-06-11 19:49:26,998:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=404, solver='auto',
                tol=0.0001)
2025-06-11 19:49:26,998:INFO:create_model() successfully completed......................................
2025-06-11 19:49:27,072:INFO:SubProcess create_model() end ==================================
2025-06-11 19:49:27,072:INFO:Creating metrics dataframe
2025-06-11 19:49:27,073:INFO:Initializing Random Forest Classifier
2025-06-11 19:49:27,073:INFO:Total runtime is 0.10836755434672038 minutes
2025-06-11 19:49:27,073:INFO:SubProcess create_model() called ==================================
2025-06-11 19:49:27,074:INFO:Initializing create_model()
2025-06-11 19:49:27,074:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E8D8E0B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:27,074:INFO:Checking exceptions
2025-06-11 19:49:27,074:INFO:Importing libraries
2025-06-11 19:49:27,074:INFO:Copying training dataset
2025-06-11 19:49:27,075:INFO:Defining folds
2025-06-11 19:49:27,075:INFO:Declaring metric variables
2025-06-11 19:49:27,075:INFO:Importing untrained model
2025-06-11 19:49:27,075:INFO:Random Forest Classifier Imported successfully
2025-06-11 19:49:27,075:INFO:Starting cross validation
2025-06-11 19:49:27,075:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:49:27,238:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,239:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,241:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,243:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,243:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,243:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,243:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,245:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,245:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,245:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,245:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,245:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,245:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,246:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,246:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,246:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,246:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,246:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,247:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,247:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,247:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,248:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,248:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,249:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,249:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,250:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,250:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,251:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,263:INFO:Calculating mean and std
2025-06-11 19:49:27,263:INFO:Creating metrics dataframe
2025-06-11 19:49:27,265:INFO:Uploading results into container
2025-06-11 19:49:27,265:INFO:Uploading model into container now
2025-06-11 19:49:27,265:INFO:_master_model_container: 7
2025-06-11 19:49:27,265:INFO:_display_container: 2
2025-06-11 19:49:27,265:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=404, verbose=0, warm_start=False)
2025-06-11 19:49:27,265:INFO:create_model() successfully completed......................................
2025-06-11 19:49:27,344:INFO:SubProcess create_model() end ==================================
2025-06-11 19:49:27,344:INFO:Creating metrics dataframe
2025-06-11 19:49:27,345:INFO:Initializing Quadratic Discriminant Analysis
2025-06-11 19:49:27,345:INFO:Total runtime is 0.11290096441904704 minutes
2025-06-11 19:49:27,345:INFO:SubProcess create_model() called ==================================
2025-06-11 19:49:27,345:INFO:Initializing create_model()
2025-06-11 19:49:27,345:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E8D8E0B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:27,345:INFO:Checking exceptions
2025-06-11 19:49:27,345:INFO:Importing libraries
2025-06-11 19:49:27,345:INFO:Copying training dataset
2025-06-11 19:49:27,346:INFO:Defining folds
2025-06-11 19:49:27,346:INFO:Declaring metric variables
2025-06-11 19:49:27,346:INFO:Importing untrained model
2025-06-11 19:49:27,346:INFO:Quadratic Discriminant Analysis Imported successfully
2025-06-11 19:49:27,347:INFO:Starting cross validation
2025-06-11 19:49:27,347:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:49:27,378:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:49:27,378:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:49:27,378:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:49:27,378:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:49:27,378:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:49:27,378:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:49:27,379:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:49:27,379:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:49:27,386:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,388:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,388:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,388:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,388:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,388:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,388:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,388:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,388:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,388:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,388:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,392:INFO:Calculating mean and std
2025-06-11 19:49:27,392:INFO:Creating metrics dataframe
2025-06-11 19:49:27,394:INFO:Uploading results into container
2025-06-11 19:49:27,394:INFO:Uploading model into container now
2025-06-11 19:49:27,394:INFO:_master_model_container: 8
2025-06-11 19:49:27,394:INFO:_display_container: 2
2025-06-11 19:49:27,394:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-06-11 19:49:27,394:INFO:create_model() successfully completed......................................
2025-06-11 19:49:27,469:INFO:SubProcess create_model() end ==================================
2025-06-11 19:49:27,469:INFO:Creating metrics dataframe
2025-06-11 19:49:27,471:INFO:Initializing Ada Boost Classifier
2025-06-11 19:49:27,471:INFO:Total runtime is 0.1150122086207072 minutes
2025-06-11 19:49:27,471:INFO:SubProcess create_model() called ==================================
2025-06-11 19:49:27,471:INFO:Initializing create_model()
2025-06-11 19:49:27,471:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E8D8E0B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:27,471:INFO:Checking exceptions
2025-06-11 19:49:27,471:INFO:Importing libraries
2025-06-11 19:49:27,471:INFO:Copying training dataset
2025-06-11 19:49:27,472:INFO:Defining folds
2025-06-11 19:49:27,472:INFO:Declaring metric variables
2025-06-11 19:49:27,472:INFO:Importing untrained model
2025-06-11 19:49:27,472:INFO:Ada Boost Classifier Imported successfully
2025-06-11 19:49:27,472:INFO:Starting cross validation
2025-06-11 19:49:27,473:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:49:27,529:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,529:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,529:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,530:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,530:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,530:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,530:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,530:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,530:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,530:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:27,531:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,531:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,531:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,531:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,531:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,531:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:27,531:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,531:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,532:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,532:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,532:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,532:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,533:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,533:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,533:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,533:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,533:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,533:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,534:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,534:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,534:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,538:INFO:Calculating mean and std
2025-06-11 19:49:27,538:INFO:Creating metrics dataframe
2025-06-11 19:49:27,540:INFO:Uploading results into container
2025-06-11 19:49:27,540:INFO:Uploading model into container now
2025-06-11 19:49:27,540:INFO:_master_model_container: 9
2025-06-11 19:49:27,540:INFO:_display_container: 2
2025-06-11 19:49:27,540:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=404)
2025-06-11 19:49:27,540:INFO:create_model() successfully completed......................................
2025-06-11 19:49:27,614:INFO:SubProcess create_model() end ==================================
2025-06-11 19:49:27,614:INFO:Creating metrics dataframe
2025-06-11 19:49:27,615:INFO:Initializing Gradient Boosting Classifier
2025-06-11 19:49:27,615:INFO:Total runtime is 0.11739967266718547 minutes
2025-06-11 19:49:27,616:INFO:SubProcess create_model() called ==================================
2025-06-11 19:49:27,616:INFO:Initializing create_model()
2025-06-11 19:49:27,616:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E8D8E0B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:27,616:INFO:Checking exceptions
2025-06-11 19:49:27,616:INFO:Importing libraries
2025-06-11 19:49:27,616:INFO:Copying training dataset
2025-06-11 19:49:27,617:INFO:Defining folds
2025-06-11 19:49:27,617:INFO:Declaring metric variables
2025-06-11 19:49:27,617:INFO:Importing untrained model
2025-06-11 19:49:27,617:INFO:Gradient Boosting Classifier Imported successfully
2025-06-11 19:49:27,617:INFO:Starting cross validation
2025-06-11 19:49:27,617:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:49:27,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,863:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,864:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,865:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,865:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,865:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,865:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,866:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,866:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,867:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,868:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,869:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,869:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,869:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,869:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,870:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,870:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,870:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,872:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,876:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,876:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,877:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,878:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,879:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,879:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,879:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,879:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,881:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:27,891:INFO:Calculating mean and std
2025-06-11 19:49:27,891:INFO:Creating metrics dataframe
2025-06-11 19:49:27,892:INFO:Uploading results into container
2025-06-11 19:49:27,893:INFO:Uploading model into container now
2025-06-11 19:49:27,893:INFO:_master_model_container: 10
2025-06-11 19:49:27,893:INFO:_display_container: 2
2025-06-11 19:49:27,893:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=404, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-06-11 19:49:27,893:INFO:create_model() successfully completed......................................
2025-06-11 19:49:27,976:INFO:SubProcess create_model() end ==================================
2025-06-11 19:49:27,976:INFO:Creating metrics dataframe
2025-06-11 19:49:27,978:INFO:Initializing Linear Discriminant Analysis
2025-06-11 19:49:27,978:INFO:Total runtime is 0.12345927953720093 minutes
2025-06-11 19:49:27,978:INFO:SubProcess create_model() called ==================================
2025-06-11 19:49:27,978:INFO:Initializing create_model()
2025-06-11 19:49:27,978:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E8D8E0B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:27,978:INFO:Checking exceptions
2025-06-11 19:49:27,978:INFO:Importing libraries
2025-06-11 19:49:27,978:INFO:Copying training dataset
2025-06-11 19:49:27,979:INFO:Defining folds
2025-06-11 19:49:27,979:INFO:Declaring metric variables
2025-06-11 19:49:27,979:INFO:Importing untrained model
2025-06-11 19:49:27,979:INFO:Linear Discriminant Analysis Imported successfully
2025-06-11 19:49:27,979:INFO:Starting cross validation
2025-06-11 19:49:27,979:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:49:28,007:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,007:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,007:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,007:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,007:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,008:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,007:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,008:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,008:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,008:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,008:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,008:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,008:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,008:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,008:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,008:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,008:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,009:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,009:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,009:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,009:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,009:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,009:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,009:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,009:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,009:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,009:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,011:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,015:INFO:Calculating mean and std
2025-06-11 19:49:28,015:INFO:Creating metrics dataframe
2025-06-11 19:49:28,017:INFO:Uploading results into container
2025-06-11 19:49:28,017:INFO:Uploading model into container now
2025-06-11 19:49:28,017:INFO:_master_model_container: 11
2025-06-11 19:49:28,017:INFO:_display_container: 2
2025-06-11 19:49:28,017:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-06-11 19:49:28,017:INFO:create_model() successfully completed......................................
2025-06-11 19:49:28,097:INFO:SubProcess create_model() end ==================================
2025-06-11 19:49:28,097:INFO:Creating metrics dataframe
2025-06-11 19:49:28,099:INFO:Initializing Extra Trees Classifier
2025-06-11 19:49:28,099:INFO:Total runtime is 0.125471027692159 minutes
2025-06-11 19:49:28,099:INFO:SubProcess create_model() called ==================================
2025-06-11 19:49:28,099:INFO:Initializing create_model()
2025-06-11 19:49:28,099:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E8D8E0B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:28,099:INFO:Checking exceptions
2025-06-11 19:49:28,099:INFO:Importing libraries
2025-06-11 19:49:28,099:INFO:Copying training dataset
2025-06-11 19:49:28,099:INFO:Defining folds
2025-06-11 19:49:28,099:INFO:Declaring metric variables
2025-06-11 19:49:28,099:INFO:Importing untrained model
2025-06-11 19:49:28,100:INFO:Extra Trees Classifier Imported successfully
2025-06-11 19:49:28,100:INFO:Starting cross validation
2025-06-11 19:49:28,100:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:49:28,247:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,248:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,248:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,249:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,249:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,249:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,255:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,255:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,256:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,256:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,256:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,258:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,258:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,258:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,258:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,259:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,259:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,259:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,259:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,259:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,259:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,260:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,260:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,260:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,260:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,261:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,261:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,264:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,265:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,265:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:28,272:INFO:Calculating mean and std
2025-06-11 19:49:28,272:INFO:Creating metrics dataframe
2025-06-11 19:49:28,274:INFO:Uploading results into container
2025-06-11 19:49:28,274:INFO:Uploading model into container now
2025-06-11 19:49:28,275:INFO:_master_model_container: 12
2025-06-11 19:49:28,275:INFO:_display_container: 2
2025-06-11 19:49:28,275:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=404, verbose=0, warm_start=False)
2025-06-11 19:49:28,275:INFO:create_model() successfully completed......................................
2025-06-11 19:49:28,343:INFO:SubProcess create_model() end ==================================
2025-06-11 19:49:28,343:INFO:Creating metrics dataframe
2025-06-11 19:49:28,345:INFO:Initializing Light Gradient Boosting Machine
2025-06-11 19:49:28,345:INFO:Total runtime is 0.1295687476793925 minutes
2025-06-11 19:49:28,345:INFO:SubProcess create_model() called ==================================
2025-06-11 19:49:28,345:INFO:Initializing create_model()
2025-06-11 19:49:28,345:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E8D8E0B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:28,345:INFO:Checking exceptions
2025-06-11 19:49:28,345:INFO:Importing libraries
2025-06-11 19:49:28,345:INFO:Copying training dataset
2025-06-11 19:49:28,345:INFO:Defining folds
2025-06-11 19:49:28,345:INFO:Declaring metric variables
2025-06-11 19:49:28,345:INFO:Importing untrained model
2025-06-11 19:49:28,346:INFO:Light Gradient Boosting Machine Imported successfully
2025-06-11 19:49:28,346:INFO:Starting cross validation
2025-06-11 19:49:28,346:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:49:29,138:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,138:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,140:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,387:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,389:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,392:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,395:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,396:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,398:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,435:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,436:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,437:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,546:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,548:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,548:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,620:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,621:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,621:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,622:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,622:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,623:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,652:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,653:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,654:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,656:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,658:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,659:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,660:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,661:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,663:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,668:INFO:Calculating mean and std
2025-06-11 19:49:29,668:INFO:Creating metrics dataframe
2025-06-11 19:49:29,671:INFO:Uploading results into container
2025-06-11 19:49:29,671:INFO:Uploading model into container now
2025-06-11 19:49:29,671:INFO:_master_model_container: 13
2025-06-11 19:49:29,671:INFO:_display_container: 2
2025-06-11 19:49:29,672:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=404, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-06-11 19:49:29,672:INFO:create_model() successfully completed......................................
2025-06-11 19:49:29,764:INFO:SubProcess create_model() end ==================================
2025-06-11 19:49:29,764:INFO:Creating metrics dataframe
2025-06-11 19:49:29,766:INFO:Initializing Dummy Classifier
2025-06-11 19:49:29,766:INFO:Total runtime is 0.15325911045074464 minutes
2025-06-11 19:49:29,766:INFO:SubProcess create_model() called ==================================
2025-06-11 19:49:29,766:INFO:Initializing create_model()
2025-06-11 19:49:29,766:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E8D8E0B6D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:29,766:INFO:Checking exceptions
2025-06-11 19:49:29,766:INFO:Importing libraries
2025-06-11 19:49:29,766:INFO:Copying training dataset
2025-06-11 19:49:29,767:INFO:Defining folds
2025-06-11 19:49:29,767:INFO:Declaring metric variables
2025-06-11 19:49:29,767:INFO:Importing untrained model
2025-06-11 19:49:29,767:INFO:Dummy Classifier Imported successfully
2025-06-11 19:49:29,767:INFO:Starting cross validation
2025-06-11 19:49:29,768:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:49:29,789:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,791:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,791:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,791:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,791:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:29,791:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,791:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,791:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,791:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,791:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:29,792:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:29,792:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,792:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,792:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,792:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,792:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:29,793:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,793:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,793:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,793:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,793:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,793:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:29,793:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,794:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,794:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,794:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,794:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:29,794:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,794:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:29,794:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,794:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

r, msg_start, len(result))

2025-06-11 19:49:29,794:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,794:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,795:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:29,795:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,795:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,795:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,795:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:49:29,796:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:29,803:INFO:Calculating mean and std
2025-06-11 19:49:29,803:INFO:Creating metrics dataframe
2025-06-11 19:49:29,804:INFO:Uploading results into container
2025-06-11 19:49:29,804:INFO:Uploading model into container now
2025-06-11 19:49:29,804:INFO:_master_model_container: 14
2025-06-11 19:49:29,804:INFO:_display_container: 2
2025-06-11 19:49:29,805:INFO:DummyClassifier(constant=None, random_state=404, strategy='prior')
2025-06-11 19:49:29,805:INFO:create_model() successfully completed......................................
2025-06-11 19:49:29,884:INFO:SubProcess create_model() end ==================================
2025-06-11 19:49:29,884:INFO:Creating metrics dataframe
2025-06-11 19:49:29,887:INFO:Initializing create_model()
2025-06-11 19:49:29,887:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:49:29,887:INFO:Checking exceptions
2025-06-11 19:49:29,888:INFO:Importing libraries
2025-06-11 19:49:29,888:INFO:Copying training dataset
2025-06-11 19:49:29,889:INFO:Defining folds
2025-06-11 19:49:29,889:INFO:Declaring metric variables
2025-06-11 19:49:29,889:INFO:Importing untrained model
2025-06-11 19:49:29,889:INFO:Declaring custom model
2025-06-11 19:49:29,889:INFO:Decision Tree Classifier Imported successfully
2025-06-11 19:49:29,889:INFO:Cross validation set to False
2025-06-11 19:49:29,889:INFO:Fitting Model
2025-06-11 19:49:29,900:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best')
2025-06-11 19:49:29,900:INFO:create_model() successfully completed......................................
2025-06-11 19:49:29,969:INFO:Creating Dashboard logs
2025-06-11 19:49:29,970:INFO:Model: Decision Tree Classifier
2025-06-11 19:49:29,997:INFO:Logged params: {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'random_state': 404, 'splitter': 'best'}
2025-06-11 19:49:30,083:INFO:Initializing predict_model()
2025-06-11 19:49:30,084:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E8DAE585E0>)
2025-06-11 19:49:30,084:INFO:Checking exceptions
2025-06-11 19:49:30,084:INFO:Preloading libraries
2025-06-11 19:49:30,117:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:30,118:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:30,119:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:49:30,203:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2025-06-11 19:49:30,319:INFO:Creating Dashboard logs
2025-06-11 19:49:30,319:INFO:Model: Random Forest Classifier
2025-06-11 19:49:30,340:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 404, 'verbose': 0, 'warm_start': False}
2025-06-11 19:49:30,534:INFO:Creating Dashboard logs
2025-06-11 19:49:30,534:INFO:Model: Gradient Boosting Classifier
2025-06-11 19:49:30,556:INFO:Logged params: {'ccp_alpha': 0.0, 'criterion': 'friedman_mse', 'init': None, 'learning_rate': 0.1, 'loss': 'log_loss', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_iter_no_change': None, 'random_state': 404, 'subsample': 1.0, 'tol': 0.0001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-06-11 19:49:30,764:INFO:Creating Dashboard logs
2025-06-11 19:49:30,764:INFO:Model: Light Gradient Boosting Machine
2025-06-11 19:49:30,786:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 404, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-06-11 19:49:30,984:INFO:Creating Dashboard logs
2025-06-11 19:49:30,984:INFO:Model: Extra Trees Classifier
2025-06-11 19:49:31,006:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 404, 'verbose': 0, 'warm_start': False}
2025-06-11 19:49:31,194:INFO:Creating Dashboard logs
2025-06-11 19:49:31,195:INFO:Model: Naive Bayes
2025-06-11 19:49:31,216:INFO:Logged params: {'priors': None, 'var_smoothing': 1e-09}
2025-06-11 19:49:31,401:INFO:Creating Dashboard logs
2025-06-11 19:49:31,402:INFO:Model: Linear Discriminant Analysis
2025-06-11 19:49:31,422:INFO:Logged params: {'covariance_estimator': None, 'n_components': None, 'priors': None, 'shrinkage': None, 'solver': 'svd', 'store_covariance': False, 'tol': 0.0001}
2025-06-11 19:49:31,610:INFO:Creating Dashboard logs
2025-06-11 19:49:31,611:INFO:Model: Ridge Classifier
2025-06-11 19:49:31,633:INFO:Logged params: {'alpha': 1.0, 'class_weight': None, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 404, 'solver': 'auto', 'tol': 0.0001}
2025-06-11 19:49:31,821:INFO:Creating Dashboard logs
2025-06-11 19:49:31,821:INFO:Model: K Neighbors Classifier
2025-06-11 19:49:31,854:INFO:Logged params: {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'minkowski', 'metric_params': None, 'n_jobs': -1, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
2025-06-11 19:49:32,068:INFO:Creating Dashboard logs
2025-06-11 19:49:32,068:INFO:Model: Logistic Regression
2025-06-11 19:49:32,089:INFO:Logged params: {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 404, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2025-06-11 19:49:32,281:INFO:Creating Dashboard logs
2025-06-11 19:49:32,281:INFO:Model: Ada Boost Classifier
2025-06-11 19:49:32,303:INFO:Logged params: {'algorithm': 'SAMME.R', 'base_estimator': 'deprecated', 'estimator': None, 'learning_rate': 1.0, 'n_estimators': 50, 'random_state': 404}
2025-06-11 19:49:32,489:INFO:Creating Dashboard logs
2025-06-11 19:49:32,489:INFO:Model: SVM - Linear Kernel
2025-06-11 19:49:32,510:INFO:Logged params: {'alpha': 0.0001, 'average': False, 'class_weight': None, 'early_stopping': False, 'epsilon': 0.1, 'eta0': 0.001, 'fit_intercept': True, 'l1_ratio': 0.15, 'learning_rate': 'optimal', 'loss': 'hinge', 'max_iter': 1000, 'n_iter_no_change': 5, 'n_jobs': -1, 'penalty': 'l2', 'power_t': 0.5, 'random_state': 404, 'shuffle': True, 'tol': 0.001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-06-11 19:49:32,703:INFO:Creating Dashboard logs
2025-06-11 19:49:32,703:INFO:Model: Dummy Classifier
2025-06-11 19:49:32,724:INFO:Logged params: {'constant': None, 'random_state': 404, 'strategy': 'prior'}
2025-06-11 19:49:32,911:INFO:Creating Dashboard logs
2025-06-11 19:49:32,911:INFO:Model: Quadratic Discriminant Analysis
2025-06-11 19:49:32,937:INFO:Logged params: {'priors': None, 'reg_param': 0.0, 'store_covariance': False, 'tol': 0.0001}
2025-06-11 19:49:33,187:INFO:_master_model_container: 14
2025-06-11 19:49:33,187:INFO:_display_container: 2
2025-06-11 19:49:33,188:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best')
2025-06-11 19:49:33,188:INFO:compare_models() successfully completed......................................
2025-06-11 19:49:33,188:INFO:Initializing evaluate_model()
2025-06-11 19:49:33,188:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best'), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-06-11 19:49:33,332:INFO:Initializing plot_model()
2025-06-11 19:49:33,332:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E8D8B3E890>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best'), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2025-06-11 19:49:33,332:INFO:Checking exceptions
2025-06-11 19:49:33,333:INFO:Preloading libraries
2025-06-11 19:49:33,333:INFO:Copying training dataset
2025-06-11 19:49:33,333:INFO:Plot type: pipeline
2025-06-11 19:49:40,606:INFO:Visual Rendered Successfully
2025-06-11 19:49:40,693:INFO:plot_model() successfully completed......................................
2025-06-11 19:53:10,693:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:53:10,693:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:53:10,693:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:53:10,693:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:53:11,081:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 19:53:22,084:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:53:22,084:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:53:22,084:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:53:22,084:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:53:22,459:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 19:54:57,043:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:54:57,043:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:54:57,043:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:54:57,044:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:54:57,412:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 19:56:39,421:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:56:39,421:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:56:39,421:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:56:39,421:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:56:39,791:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 19:56:42,117:INFO:PyCaret ClassificationExperiment
2025-06-11 19:56:42,117:INFO:Logging name: riesgo_credito_multiclase
2025-06-11 19:56:42,117:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-06-11 19:56:42,117:INFO:version 3.2.0
2025-06-11 19:56:42,117:INFO:Initializing setup()
2025-06-11 19:56:42,117:INFO:self.USI: d4a4
2025-06-11 19:56:42,117:INFO:self._variable_keys: {'exp_id', 'exp_name_log', 'html_param', 'X_test', 'fold_shuffle_param', 'log_plots_param', 'seed', 'idx', '_available_plots', 'y_train', 'gpu_n_jobs_param', 'memory', 'fix_imbalance', 'USI', 'fold_groups_param', 'X', 'fold_generator', '_ml_usecase', 'data', 'gpu_param', 'y', 'target_param', 'X_train', 'is_multiclass', 'y_test', 'pipeline', 'logging_param', 'n_jobs_param'}
2025-06-11 19:56:42,117:INFO:Checking environment
2025-06-11 19:56:42,117:INFO:python_version: 3.11.0
2025-06-11 19:56:42,117:INFO:python_build: ('main', 'Oct 24 2022 18:26:48')
2025-06-11 19:56:42,118:INFO:machine: AMD64
2025-06-11 19:56:42,132:INFO:platform: Windows-10-10.0.26100-SP0
2025-06-11 19:56:42,138:INFO:Memory: svmem(total=102695145472, available=79266201600, percent=22.8, used=23428943872, free=79266201600)
2025-06-11 19:56:42,138:INFO:Physical Core: 16
2025-06-11 19:56:42,138:INFO:Logical Core: 32
2025-06-11 19:56:42,138:INFO:Checking libraries
2025-06-11 19:56:42,138:INFO:System:
2025-06-11 19:56:42,138:INFO:    python: 3.11.0 (main, Oct 24 2022, 18:26:48) [MSC v.1933 64 bit (AMD64)]
2025-06-11 19:56:42,138:INFO:executable: C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\python.exe
2025-06-11 19:56:42,138:INFO:   machine: Windows-10-10.0.26100-SP0
2025-06-11 19:56:42,138:INFO:PyCaret required dependencies:
2025-06-11 19:56:42,174:INFO:                 pip: 22.3
2025-06-11 19:56:42,175:INFO:          setuptools: 65.5.0
2025-06-11 19:56:42,175:INFO:             pycaret: 3.2.0
2025-06-11 19:56:42,175:INFO:             IPython: 9.1.0
2025-06-11 19:56:42,175:INFO:          ipywidgets: 8.1.7
2025-06-11 19:56:42,175:INFO:                tqdm: 4.67.1
2025-06-11 19:56:42,175:INFO:               numpy: 1.25.2
2025-06-11 19:56:42,175:INFO:              pandas: 1.5.3
2025-06-11 19:56:42,175:INFO:              jinja2: 3.1.6
2025-06-11 19:56:42,175:INFO:               scipy: 1.10.1
2025-06-11 19:56:42,175:INFO:              joblib: 1.3.2
2025-06-11 19:56:42,175:INFO:             sklearn: 1.2.2
2025-06-11 19:56:42,175:INFO:                pyod: 2.0.5
2025-06-11 19:56:42,175:INFO:            imblearn: 0.12.4
2025-06-11 19:56:42,175:INFO:   category_encoders: 2.7.0
2025-06-11 19:56:42,175:INFO:            lightgbm: 4.6.0
2025-06-11 19:56:42,175:INFO:               numba: 0.61.0
2025-06-11 19:56:42,175:INFO:            requests: 2.32.3
2025-06-11 19:56:42,175:INFO:          matplotlib: 3.6.0
2025-06-11 19:56:42,175:INFO:          scikitplot: 0.3.7
2025-06-11 19:56:42,176:INFO:         yellowbrick: 1.5
2025-06-11 19:56:42,176:INFO:              plotly: 5.24.1
2025-06-11 19:56:42,176:INFO:    plotly-resampler: Not installed
2025-06-11 19:56:42,176:INFO:             kaleido: 0.2.1
2025-06-11 19:56:42,176:INFO:           schemdraw: 0.15
2025-06-11 19:56:42,176:INFO:         statsmodels: 0.14.4
2025-06-11 19:56:42,176:INFO:              sktime: 0.21.1
2025-06-11 19:56:42,176:INFO:               tbats: 1.1.3
2025-06-11 19:56:42,176:INFO:            pmdarima: 2.0.4
2025-06-11 19:56:42,176:INFO:              psutil: 7.0.0
2025-06-11 19:56:42,176:INFO:          markupsafe: 3.0.2
2025-06-11 19:56:42,176:INFO:             pickle5: Not installed
2025-06-11 19:56:42,176:INFO:         cloudpickle: 2.2.1
2025-06-11 19:56:42,176:INFO:         deprecation: 2.1.0
2025-06-11 19:56:42,176:INFO:              xxhash: 3.5.0
2025-06-11 19:56:42,176:INFO:           wurlitzer: Not installed
2025-06-11 19:56:42,176:INFO:PyCaret optional dependencies:
2025-06-11 19:56:42,337:INFO:                shap: 0.44.1
2025-06-11 19:56:42,337:INFO:           interpret: 0.6.10
2025-06-11 19:56:42,337:INFO:                umap: 0.5.7
2025-06-11 19:56:42,337:INFO:     ydata_profiling: 4.16.1
2025-06-11 19:56:42,337:INFO:  explainerdashboard: 0.4.8
2025-06-11 19:56:42,337:INFO:             autoviz: Not installed
2025-06-11 19:56:42,337:INFO:           fairlearn: 0.7.0
2025-06-11 19:56:42,337:INFO:          deepchecks: Not installed
2025-06-11 19:56:42,337:INFO:             xgboost: Not installed
2025-06-11 19:56:42,337:INFO:            catboost: Not installed
2025-06-11 19:56:42,337:INFO:              kmodes: Not installed
2025-06-11 19:56:42,337:INFO:             mlxtend: Not installed
2025-06-11 19:56:42,337:INFO:       statsforecast: Not installed
2025-06-11 19:56:42,337:INFO:        tune_sklearn: Not installed
2025-06-11 19:56:42,337:INFO:                 ray: Not installed
2025-06-11 19:56:42,337:INFO:            hyperopt: Not installed
2025-06-11 19:56:42,337:INFO:              optuna: Not installed
2025-06-11 19:56:42,337:INFO:               skopt: Not installed
2025-06-11 19:56:42,337:INFO:              mlflow: 2.22.0
2025-06-11 19:56:42,337:INFO:              gradio: Not installed
2025-06-11 19:56:42,337:INFO:             fastapi: 0.115.12
2025-06-11 19:56:42,337:INFO:             uvicorn: 0.34.2
2025-06-11 19:56:42,337:INFO:              m2cgen: Not installed
2025-06-11 19:56:42,337:INFO:           evidently: Not installed
2025-06-11 19:56:42,337:INFO:               fugue: Not installed
2025-06-11 19:56:42,337:INFO:           streamlit: 1.45.1
2025-06-11 19:56:42,337:INFO:             prophet: Not installed
2025-06-11 19:56:42,337:INFO:None
2025-06-11 19:56:42,337:INFO:Set up data.
2025-06-11 19:56:42,340:INFO:Set up folding strategy.
2025-06-11 19:56:42,340:INFO:Set up train/test split.
2025-06-11 19:56:42,342:INFO:Set up index.
2025-06-11 19:56:42,342:INFO:Assigning column types.
2025-06-11 19:56:42,343:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-06-11 19:56:42,362:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-11 19:56:42,363:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 19:56:42,377:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,377:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,396:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-11 19:56:42,397:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 19:56:42,408:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,409:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,409:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-06-11 19:56:42,427:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 19:56:42,439:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,439:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,458:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 19:56:42,468:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,468:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,468:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-06-11 19:56:42,499:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,499:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,528:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,528:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,530:INFO:Preparing preprocessing pipeline...
2025-06-11 19:56:42,530:INFO:Set up label encoding.
2025-06-11 19:56:42,530:INFO:Set up simple imputation.
2025-06-11 19:56:42,531:INFO:Set up encoding of categorical features.
2025-06-11 19:56:42,548:INFO:Finished creating preprocessing pipeline.
2025-06-11 19:56:42,551:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-06-11 19:56:42,551:INFO:Creating final display dataframe.
2025-06-11 19:56:42,602:INFO:Setup _display_container:                     Description                       Value
0                    Session id                         404
1                        Target                  risk_level
2                   Target type                  Multiclass
3                Target mapping  alto: 0, bajo: 1, medio: 2
4           Original data shape                   (1000, 8)
5        Transformed data shape                  (1000, 12)
6   Transformed train set shape                   (700, 12)
7    Transformed test set shape                   (300, 12)
8              Numeric features                           6
9          Categorical features                           1
10                   Preprocess                        True
11              Imputation type                      simple
12           Numeric imputation                        mean
13       Categorical imputation                        mode
14     Maximum one-hot encoding                          25
15              Encoding method                        None
16               Fold Generator             StratifiedKFold
17                  Fold Number                          10
18                     CPU Jobs                          -1
19                      Use GPU                       False
20               Log Experiment                MlflowLogger
21              Experiment Name   riesgo_credito_multiclase
22                          USI                        d4a4
2025-06-11 19:56:42,634:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,634:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,665:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,665:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 19:56:42,665:INFO:Logging experiment in loggers
2025-06-11 19:56:42,806:INFO:SubProcess save_model() called ==================================
2025-06-11 19:56:42,810:INFO:Initializing save_model()
2025-06-11 19:56:42,810:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), model_name=C:\Users\BRANGO~1\AppData\Local\Temp\tmphwwkli0w\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-11 19:56:42,810:INFO:Adding model into prep_pipe
2025-06-11 19:56:42,810:WARNING:Only Model saved as it was a pipeline.
2025-06-11 19:56:42,812:INFO:C:\Users\BRANGO~1\AppData\Local\Temp\tmphwwkli0w\Transformation Pipeline.pkl saved in current working directory
2025-06-11 19:56:42,814:INFO:Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-06-11 19:56:42,814:INFO:save_model() successfully completed......................................
2025-06-11 19:56:42,885:INFO:SubProcess save_model() end ==================================
2025-06-11 19:56:42,918:INFO:setup() successfully completed in 0.55s...............
2025-06-11 19:56:42,920:INFO:Initializing compare_models()
2025-06-11 19:56:42,920:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-06-11 19:56:42,920:INFO:Checking exceptions
2025-06-11 19:56:42,921:INFO:Preparing display monitor
2025-06-11 19:56:42,923:INFO:Initializing Logistic Regression
2025-06-11 19:56:42,923:INFO:Total runtime is 0.0 minutes
2025-06-11 19:56:42,923:INFO:SubProcess create_model() called ==================================
2025-06-11 19:56:42,923:INFO:Initializing create_model()
2025-06-11 19:56:42,923:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016D4E95CC90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:42,923:INFO:Checking exceptions
2025-06-11 19:56:42,923:INFO:Importing libraries
2025-06-11 19:56:42,923:INFO:Copying training dataset
2025-06-11 19:56:42,924:INFO:Defining folds
2025-06-11 19:56:42,924:INFO:Declaring metric variables
2025-06-11 19:56:42,924:INFO:Importing untrained model
2025-06-11 19:56:42,924:INFO:Logistic Regression Imported successfully
2025-06-11 19:56:42,924:INFO:Starting cross validation
2025-06-11 19:56:42,924:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:56:44,708:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:56:44,714:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:56:44,715:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:56:44,715:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:56:44,717:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:56:44,718:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,719:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,720:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,723:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:56:44,724:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,725:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,725:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,725:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,726:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,726:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:56:44,726:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,726:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,726:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,727:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:56:44,727:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,727:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,727:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:56:44,728:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,728:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,728:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 19:56:44,733:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,734:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,734:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,736:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,736:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,736:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,736:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,739:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,739:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,739:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,740:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,740:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,741:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,741:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,742:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:44,748:INFO:Calculating mean and std
2025-06-11 19:56:44,748:INFO:Creating metrics dataframe
2025-06-11 19:56:44,750:INFO:Uploading results into container
2025-06-11 19:56:44,750:INFO:Uploading model into container now
2025-06-11 19:56:44,751:INFO:_master_model_container: 1
2025-06-11 19:56:44,751:INFO:_display_container: 2
2025-06-11 19:56:44,751:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=404, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-06-11 19:56:44,751:INFO:create_model() successfully completed......................................
2025-06-11 19:56:44,810:INFO:SubProcess create_model() end ==================================
2025-06-11 19:56:44,810:INFO:Creating metrics dataframe
2025-06-11 19:56:44,812:INFO:Initializing K Neighbors Classifier
2025-06-11 19:56:44,812:INFO:Total runtime is 0.03148353894551595 minutes
2025-06-11 19:56:44,812:INFO:SubProcess create_model() called ==================================
2025-06-11 19:56:44,812:INFO:Initializing create_model()
2025-06-11 19:56:44,812:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016D4E95CC90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:44,812:INFO:Checking exceptions
2025-06-11 19:56:44,812:INFO:Importing libraries
2025-06-11 19:56:44,812:INFO:Copying training dataset
2025-06-11 19:56:44,813:INFO:Defining folds
2025-06-11 19:56:44,813:INFO:Declaring metric variables
2025-06-11 19:56:44,813:INFO:Importing untrained model
2025-06-11 19:56:44,813:INFO:K Neighbors Classifier Imported successfully
2025-06-11 19:56:44,814:INFO:Starting cross validation
2025-06-11 19:56:44,814:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:56:46,212:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,213:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,213:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,213:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,215:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:46,215:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,216:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,216:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,217:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,218:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:46,218:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,228:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,228:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,230:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,230:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,230:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:46,230:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,230:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,231:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,233:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,233:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,233:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,234:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,234:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,234:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,234:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,234:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,235:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,235:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,235:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,236:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,236:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:46,236:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:46,236:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,237:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:46,243:INFO:Calculating mean and std
2025-06-11 19:56:46,243:INFO:Creating metrics dataframe
2025-06-11 19:56:46,245:INFO:Uploading results into container
2025-06-11 19:56:46,246:INFO:Uploading model into container now
2025-06-11 19:56:46,246:INFO:_master_model_container: 2
2025-06-11 19:56:46,246:INFO:_display_container: 2
2025-06-11 19:56:46,246:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-06-11 19:56:46,246:INFO:create_model() successfully completed......................................
2025-06-11 19:56:46,326:INFO:SubProcess create_model() end ==================================
2025-06-11 19:56:46,326:INFO:Creating metrics dataframe
2025-06-11 19:56:46,328:INFO:Initializing Naive Bayes
2025-06-11 19:56:46,328:INFO:Total runtime is 0.056760720411936444 minutes
2025-06-11 19:56:46,328:INFO:SubProcess create_model() called ==================================
2025-06-11 19:56:46,328:INFO:Initializing create_model()
2025-06-11 19:56:46,328:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016D4E95CC90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:46,328:INFO:Checking exceptions
2025-06-11 19:56:46,328:INFO:Importing libraries
2025-06-11 19:56:46,328:INFO:Copying training dataset
2025-06-11 19:56:46,328:INFO:Defining folds
2025-06-11 19:56:46,328:INFO:Declaring metric variables
2025-06-11 19:56:46,328:INFO:Importing untrained model
2025-06-11 19:56:46,328:INFO:Naive Bayes Imported successfully
2025-06-11 19:56:46,330:INFO:Starting cross validation
2025-06-11 19:56:46,330:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:56:47,651:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,652:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,653:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,673:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,674:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,674:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,674:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,675:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,675:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,685:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,686:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,687:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,687:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,689:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,689:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,689:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,690:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,691:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,697:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,697:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,699:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,703:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,704:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,704:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,705:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,706:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,706:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,707:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,707:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,708:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,712:INFO:Calculating mean and std
2025-06-11 19:56:47,712:INFO:Creating metrics dataframe
2025-06-11 19:56:47,714:INFO:Uploading results into container
2025-06-11 19:56:47,714:INFO:Uploading model into container now
2025-06-11 19:56:47,714:INFO:_master_model_container: 3
2025-06-11 19:56:47,714:INFO:_display_container: 2
2025-06-11 19:56:47,714:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-06-11 19:56:47,714:INFO:create_model() successfully completed......................................
2025-06-11 19:56:47,796:INFO:SubProcess create_model() end ==================================
2025-06-11 19:56:47,796:INFO:Creating metrics dataframe
2025-06-11 19:56:47,798:INFO:Initializing Decision Tree Classifier
2025-06-11 19:56:47,798:INFO:Total runtime is 0.08125830094019572 minutes
2025-06-11 19:56:47,798:INFO:SubProcess create_model() called ==================================
2025-06-11 19:56:47,798:INFO:Initializing create_model()
2025-06-11 19:56:47,798:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016D4E95CC90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:47,798:INFO:Checking exceptions
2025-06-11 19:56:47,798:INFO:Importing libraries
2025-06-11 19:56:47,798:INFO:Copying training dataset
2025-06-11 19:56:47,800:INFO:Defining folds
2025-06-11 19:56:47,800:INFO:Declaring metric variables
2025-06-11 19:56:47,800:INFO:Importing untrained model
2025-06-11 19:56:47,800:INFO:Decision Tree Classifier Imported successfully
2025-06-11 19:56:47,800:INFO:Starting cross validation
2025-06-11 19:56:47,801:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:56:47,826:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,826:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,827:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,827:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,827:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,827:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,828:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,828:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,828:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,828:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,828:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,828:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,828:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,828:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,828:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,828:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,829:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,829:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,829:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,829:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,829:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,830:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:47,830:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,856:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,856:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,857:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,857:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,858:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,858:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,861:INFO:Calculating mean and std
2025-06-11 19:56:48,861:INFO:Creating metrics dataframe
2025-06-11 19:56:48,862:INFO:Uploading results into container
2025-06-11 19:56:48,862:INFO:Uploading model into container now
2025-06-11 19:56:48,862:INFO:_master_model_container: 4
2025-06-11 19:56:48,862:INFO:_display_container: 2
2025-06-11 19:56:48,862:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best')
2025-06-11 19:56:48,862:INFO:create_model() successfully completed......................................
2025-06-11 19:56:48,944:INFO:SubProcess create_model() end ==================================
2025-06-11 19:56:48,944:INFO:Creating metrics dataframe
2025-06-11 19:56:48,946:INFO:Initializing SVM - Linear Kernel
2025-06-11 19:56:48,946:INFO:Total runtime is 0.10038233995437622 minutes
2025-06-11 19:56:48,946:INFO:SubProcess create_model() called ==================================
2025-06-11 19:56:48,946:INFO:Initializing create_model()
2025-06-11 19:56:48,946:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016D4E95CC90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:48,946:INFO:Checking exceptions
2025-06-11 19:56:48,946:INFO:Importing libraries
2025-06-11 19:56:48,946:INFO:Copying training dataset
2025-06-11 19:56:48,947:INFO:Defining folds
2025-06-11 19:56:48,947:INFO:Declaring metric variables
2025-06-11 19:56:48,947:INFO:Importing untrained model
2025-06-11 19:56:48,947:INFO:SVM - Linear Kernel Imported successfully
2025-06-11 19:56:48,947:INFO:Starting cross validation
2025-06-11 19:56:48,948:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:56:48,992:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:56:48,992:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:48,993:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,996:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,996:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,996:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,996:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,996:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,996:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:48,997:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:48,997:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,003:INFO:Calculating mean and std
2025-06-11 19:56:49,003:INFO:Creating metrics dataframe
2025-06-11 19:56:49,004:INFO:Uploading results into container
2025-06-11 19:56:49,005:INFO:Uploading model into container now
2025-06-11 19:56:49,005:INFO:_master_model_container: 5
2025-06-11 19:56:49,005:INFO:_display_container: 2
2025-06-11 19:56:49,005:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=404, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-06-11 19:56:49,005:INFO:create_model() successfully completed......................................
2025-06-11 19:56:49,078:INFO:SubProcess create_model() end ==================================
2025-06-11 19:56:49,078:INFO:Creating metrics dataframe
2025-06-11 19:56:49,080:INFO:Initializing Ridge Classifier
2025-06-11 19:56:49,081:INFO:Total runtime is 0.10263023773829141 minutes
2025-06-11 19:56:49,081:INFO:SubProcess create_model() called ==================================
2025-06-11 19:56:49,081:INFO:Initializing create_model()
2025-06-11 19:56:49,081:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016D4E95CC90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:49,081:INFO:Checking exceptions
2025-06-11 19:56:49,081:INFO:Importing libraries
2025-06-11 19:56:49,081:INFO:Copying training dataset
2025-06-11 19:56:49,082:INFO:Defining folds
2025-06-11 19:56:49,082:INFO:Declaring metric variables
2025-06-11 19:56:49,082:INFO:Importing untrained model
2025-06-11 19:56:49,082:INFO:Ridge Classifier Imported successfully
2025-06-11 19:56:49,082:INFO:Starting cross validation
2025-06-11 19:56:49,082:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:56:49,105:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:56:49,107:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,107:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,107:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:56:49,107:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:56:49,107:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,107:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,107:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:56:49,107:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,108:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:56:49,108:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,108:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,108:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:56:49,108:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,108:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,108:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,108:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,109:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,109:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:56:49,109:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,109:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:56:49,109:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,109:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,109:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,109:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,109:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,109:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,110:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 19:56:49,110:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,110:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,110:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,110:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,110:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,111:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,111:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,111:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,111:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,117:INFO:Calculating mean and std
2025-06-11 19:56:49,117:INFO:Creating metrics dataframe
2025-06-11 19:56:49,118:INFO:Uploading results into container
2025-06-11 19:56:49,119:INFO:Uploading model into container now
2025-06-11 19:56:49,119:INFO:_master_model_container: 6
2025-06-11 19:56:49,119:INFO:_display_container: 2
2025-06-11 19:56:49,119:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=404, solver='auto',
                tol=0.0001)
2025-06-11 19:56:49,119:INFO:create_model() successfully completed......................................
2025-06-11 19:56:49,194:INFO:SubProcess create_model() end ==================================
2025-06-11 19:56:49,194:INFO:Creating metrics dataframe
2025-06-11 19:56:49,196:INFO:Initializing Random Forest Classifier
2025-06-11 19:56:49,196:INFO:Total runtime is 0.10455899238586425 minutes
2025-06-11 19:56:49,196:INFO:SubProcess create_model() called ==================================
2025-06-11 19:56:49,196:INFO:Initializing create_model()
2025-06-11 19:56:49,196:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016D4E95CC90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:49,196:INFO:Checking exceptions
2025-06-11 19:56:49,196:INFO:Importing libraries
2025-06-11 19:56:49,196:INFO:Copying training dataset
2025-06-11 19:56:49,197:INFO:Defining folds
2025-06-11 19:56:49,197:INFO:Declaring metric variables
2025-06-11 19:56:49,197:INFO:Importing untrained model
2025-06-11 19:56:49,197:INFO:Random Forest Classifier Imported successfully
2025-06-11 19:56:49,197:INFO:Starting cross validation
2025-06-11 19:56:49,198:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:56:49,364:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,365:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,366:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,366:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,368:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,368:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,369:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,369:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,369:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,369:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,369:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,369:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,369:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,370:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,370:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,370:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,370:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,370:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,371:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,371:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,371:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,371:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,371:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,371:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,374:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,376:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,377:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,391:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,392:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,393:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,398:INFO:Calculating mean and std
2025-06-11 19:56:49,398:INFO:Creating metrics dataframe
2025-06-11 19:56:49,400:INFO:Uploading results into container
2025-06-11 19:56:49,400:INFO:Uploading model into container now
2025-06-11 19:56:49,401:INFO:_master_model_container: 7
2025-06-11 19:56:49,401:INFO:_display_container: 2
2025-06-11 19:56:49,401:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=404, verbose=0, warm_start=False)
2025-06-11 19:56:49,401:INFO:create_model() successfully completed......................................
2025-06-11 19:56:49,474:INFO:SubProcess create_model() end ==================================
2025-06-11 19:56:49,474:INFO:Creating metrics dataframe
2025-06-11 19:56:49,475:INFO:Initializing Quadratic Discriminant Analysis
2025-06-11 19:56:49,475:INFO:Total runtime is 0.10920573472976683 minutes
2025-06-11 19:56:49,475:INFO:SubProcess create_model() called ==================================
2025-06-11 19:56:49,475:INFO:Initializing create_model()
2025-06-11 19:56:49,475:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016D4E95CC90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:49,475:INFO:Checking exceptions
2025-06-11 19:56:49,475:INFO:Importing libraries
2025-06-11 19:56:49,475:INFO:Copying training dataset
2025-06-11 19:56:49,476:INFO:Defining folds
2025-06-11 19:56:49,477:INFO:Declaring metric variables
2025-06-11 19:56:49,477:INFO:Importing untrained model
2025-06-11 19:56:49,477:INFO:Quadratic Discriminant Analysis Imported successfully
2025-06-11 19:56:49,477:INFO:Starting cross validation
2025-06-11 19:56:49,477:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:56:49,494:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:56:49,495:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:56:49,495:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:56:49,495:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:56:49,496:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:56:49,496:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:56:49,496:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:56:49,496:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:56:49,497:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:56:49,497:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 19:56:49,502:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,502:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,503:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,503:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,503:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,503:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,503:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,503:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,503:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,503:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,503:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,504:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,504:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,504:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,504:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,504:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,504:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,504:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,504:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,504:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,504:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,506:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,506:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,507:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,512:INFO:Calculating mean and std
2025-06-11 19:56:49,512:INFO:Creating metrics dataframe
2025-06-11 19:56:49,514:INFO:Uploading results into container
2025-06-11 19:56:49,514:INFO:Uploading model into container now
2025-06-11 19:56:49,514:INFO:_master_model_container: 8
2025-06-11 19:56:49,514:INFO:_display_container: 2
2025-06-11 19:56:49,514:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-06-11 19:56:49,514:INFO:create_model() successfully completed......................................
2025-06-11 19:56:49,588:INFO:SubProcess create_model() end ==================================
2025-06-11 19:56:49,588:INFO:Creating metrics dataframe
2025-06-11 19:56:49,591:INFO:Initializing Ada Boost Classifier
2025-06-11 19:56:49,591:INFO:Total runtime is 0.11113355954488117 minutes
2025-06-11 19:56:49,591:INFO:SubProcess create_model() called ==================================
2025-06-11 19:56:49,591:INFO:Initializing create_model()
2025-06-11 19:56:49,591:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016D4E95CC90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:49,591:INFO:Checking exceptions
2025-06-11 19:56:49,591:INFO:Importing libraries
2025-06-11 19:56:49,591:INFO:Copying training dataset
2025-06-11 19:56:49,592:INFO:Defining folds
2025-06-11 19:56:49,592:INFO:Declaring metric variables
2025-06-11 19:56:49,592:INFO:Importing untrained model
2025-06-11 19:56:49,592:INFO:Ada Boost Classifier Imported successfully
2025-06-11 19:56:49,592:INFO:Starting cross validation
2025-06-11 19:56:49,593:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:56:49,650:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,650:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,650:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,650:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,651:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,651:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:49,651:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:49,651:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,651:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,651:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,651:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,652:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:49,652:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,652:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,652:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,652:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,652:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,653:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,653:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,653:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,653:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,653:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,653:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,653:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,653:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,653:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,654:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,654:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,654:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,654:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,658:INFO:Calculating mean and std
2025-06-11 19:56:49,658:INFO:Creating metrics dataframe
2025-06-11 19:56:49,660:INFO:Uploading results into container
2025-06-11 19:56:49,660:INFO:Uploading model into container now
2025-06-11 19:56:49,660:INFO:_master_model_container: 9
2025-06-11 19:56:49,660:INFO:_display_container: 2
2025-06-11 19:56:49,660:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=404)
2025-06-11 19:56:49,660:INFO:create_model() successfully completed......................................
2025-06-11 19:56:49,732:INFO:SubProcess create_model() end ==================================
2025-06-11 19:56:49,732:INFO:Creating metrics dataframe
2025-06-11 19:56:49,733:INFO:Initializing Gradient Boosting Classifier
2025-06-11 19:56:49,733:INFO:Total runtime is 0.11349928379058837 minutes
2025-06-11 19:56:49,733:INFO:SubProcess create_model() called ==================================
2025-06-11 19:56:49,734:INFO:Initializing create_model()
2025-06-11 19:56:49,734:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016D4E95CC90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:49,734:INFO:Checking exceptions
2025-06-11 19:56:49,734:INFO:Importing libraries
2025-06-11 19:56:49,734:INFO:Copying training dataset
2025-06-11 19:56:49,734:INFO:Defining folds
2025-06-11 19:56:49,734:INFO:Declaring metric variables
2025-06-11 19:56:49,734:INFO:Importing untrained model
2025-06-11 19:56:49,734:INFO:Gradient Boosting Classifier Imported successfully
2025-06-11 19:56:49,735:INFO:Starting cross validation
2025-06-11 19:56:49,735:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:56:49,979:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,980:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,980:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,981:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,982:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,982:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,982:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,982:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,982:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,983:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,984:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,985:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,985:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,986:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,987:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,988:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,989:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,990:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,991:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,994:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,995:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:49,996:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,008:INFO:Calculating mean and std
2025-06-11 19:56:50,009:INFO:Creating metrics dataframe
2025-06-11 19:56:50,010:INFO:Uploading results into container
2025-06-11 19:56:50,010:INFO:Uploading model into container now
2025-06-11 19:56:50,010:INFO:_master_model_container: 10
2025-06-11 19:56:50,010:INFO:_display_container: 2
2025-06-11 19:56:50,011:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=404, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-06-11 19:56:50,011:INFO:create_model() successfully completed......................................
2025-06-11 19:56:50,094:INFO:SubProcess create_model() end ==================================
2025-06-11 19:56:50,094:INFO:Creating metrics dataframe
2025-06-11 19:56:50,095:INFO:Initializing Linear Discriminant Analysis
2025-06-11 19:56:50,095:INFO:Total runtime is 0.11954163312911986 minutes
2025-06-11 19:56:50,095:INFO:SubProcess create_model() called ==================================
2025-06-11 19:56:50,095:INFO:Initializing create_model()
2025-06-11 19:56:50,095:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016D4E95CC90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:50,095:INFO:Checking exceptions
2025-06-11 19:56:50,095:INFO:Importing libraries
2025-06-11 19:56:50,095:INFO:Copying training dataset
2025-06-11 19:56:50,096:INFO:Defining folds
2025-06-11 19:56:50,097:INFO:Declaring metric variables
2025-06-11 19:56:50,097:INFO:Importing untrained model
2025-06-11 19:56:50,097:INFO:Linear Discriminant Analysis Imported successfully
2025-06-11 19:56:50,097:INFO:Starting cross validation
2025-06-11 19:56:50,097:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:56:50,122:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,122:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,122:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,122:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,122:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,122:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,122:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,122:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,122:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,122:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,122:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,123:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,123:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,123:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,123:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,123:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,123:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,123:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,123:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,123:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,123:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,123:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,123:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,123:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,125:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,125:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,125:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,125:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,126:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,126:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,132:INFO:Calculating mean and std
2025-06-11 19:56:50,132:INFO:Creating metrics dataframe
2025-06-11 19:56:50,133:INFO:Uploading results into container
2025-06-11 19:56:50,133:INFO:Uploading model into container now
2025-06-11 19:56:50,133:INFO:_master_model_container: 11
2025-06-11 19:56:50,133:INFO:_display_container: 2
2025-06-11 19:56:50,133:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-06-11 19:56:50,133:INFO:create_model() successfully completed......................................
2025-06-11 19:56:50,209:INFO:SubProcess create_model() end ==================================
2025-06-11 19:56:50,209:INFO:Creating metrics dataframe
2025-06-11 19:56:50,210:INFO:Initializing Extra Trees Classifier
2025-06-11 19:56:50,210:INFO:Total runtime is 0.12145248254140217 minutes
2025-06-11 19:56:50,210:INFO:SubProcess create_model() called ==================================
2025-06-11 19:56:50,210:INFO:Initializing create_model()
2025-06-11 19:56:50,210:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016D4E95CC90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:50,210:INFO:Checking exceptions
2025-06-11 19:56:50,210:INFO:Importing libraries
2025-06-11 19:56:50,210:INFO:Copying training dataset
2025-06-11 19:56:50,211:INFO:Defining folds
2025-06-11 19:56:50,211:INFO:Declaring metric variables
2025-06-11 19:56:50,211:INFO:Importing untrained model
2025-06-11 19:56:50,211:INFO:Extra Trees Classifier Imported successfully
2025-06-11 19:56:50,212:INFO:Starting cross validation
2025-06-11 19:56:50,212:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:56:50,361:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,361:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,362:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,362:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,362:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,364:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,364:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,364:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,365:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,366:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,367:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,369:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,370:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,370:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,371:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,371:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,371:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,372:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,372:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,372:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,372:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,372:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,373:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,373:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,374:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,374:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,374:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,375:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,375:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,376:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:50,380:INFO:Calculating mean and std
2025-06-11 19:56:50,380:INFO:Creating metrics dataframe
2025-06-11 19:56:50,381:INFO:Uploading results into container
2025-06-11 19:56:50,382:INFO:Uploading model into container now
2025-06-11 19:56:50,382:INFO:_master_model_container: 12
2025-06-11 19:56:50,382:INFO:_display_container: 2
2025-06-11 19:56:50,382:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=404, verbose=0, warm_start=False)
2025-06-11 19:56:50,382:INFO:create_model() successfully completed......................................
2025-06-11 19:56:50,462:INFO:SubProcess create_model() end ==================================
2025-06-11 19:56:50,462:INFO:Creating metrics dataframe
2025-06-11 19:56:50,464:INFO:Initializing Light Gradient Boosting Machine
2025-06-11 19:56:50,464:INFO:Total runtime is 0.12568427721659342 minutes
2025-06-11 19:56:50,464:INFO:SubProcess create_model() called ==================================
2025-06-11 19:56:50,464:INFO:Initializing create_model()
2025-06-11 19:56:50,464:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016D4E95CC90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:50,464:INFO:Checking exceptions
2025-06-11 19:56:50,464:INFO:Importing libraries
2025-06-11 19:56:50,464:INFO:Copying training dataset
2025-06-11 19:56:50,465:INFO:Defining folds
2025-06-11 19:56:50,465:INFO:Declaring metric variables
2025-06-11 19:56:50,465:INFO:Importing untrained model
2025-06-11 19:56:50,465:INFO:Light Gradient Boosting Machine Imported successfully
2025-06-11 19:56:50,465:INFO:Starting cross validation
2025-06-11 19:56:50,466:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:56:51,280:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,282:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,283:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,347:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,348:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,349:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,389:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,390:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,391:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,506:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,507:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,572:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,574:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,581:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,611:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,614:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,616:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,624:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,626:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,627:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,642:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,644:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,646:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,660:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,662:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,663:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,739:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,740:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,740:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,752:INFO:Calculating mean and std
2025-06-11 19:56:51,752:INFO:Creating metrics dataframe
2025-06-11 19:56:51,753:INFO:Uploading results into container
2025-06-11 19:56:51,755:INFO:Uploading model into container now
2025-06-11 19:56:51,755:INFO:_master_model_container: 13
2025-06-11 19:56:51,755:INFO:_display_container: 2
2025-06-11 19:56:51,755:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=404, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-06-11 19:56:51,755:INFO:create_model() successfully completed......................................
2025-06-11 19:56:51,839:INFO:SubProcess create_model() end ==================================
2025-06-11 19:56:51,839:INFO:Creating metrics dataframe
2025-06-11 19:56:51,842:INFO:Initializing Dummy Classifier
2025-06-11 19:56:51,842:INFO:Total runtime is 0.14865351915359498 minutes
2025-06-11 19:56:51,842:INFO:SubProcess create_model() called ==================================
2025-06-11 19:56:51,842:INFO:Initializing create_model()
2025-06-11 19:56:51,842:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000016D4E95CC90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:51,842:INFO:Checking exceptions
2025-06-11 19:56:51,842:INFO:Importing libraries
2025-06-11 19:56:51,842:INFO:Copying training dataset
2025-06-11 19:56:51,843:INFO:Defining folds
2025-06-11 19:56:51,843:INFO:Declaring metric variables
2025-06-11 19:56:51,843:INFO:Importing untrained model
2025-06-11 19:56:51,843:INFO:Dummy Classifier Imported successfully
2025-06-11 19:56:51,843:INFO:Starting cross validation
2025-06-11 19:56:51,843:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 19:56:51,866:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,866:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,867:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,867:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,867:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,867:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:51,867:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,868:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,868:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,868:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,868:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:51,868:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,868:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:51,869:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,869:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

r, msg_start, len(result))

2025-06-11 19:56:51,869:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,869:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,869:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,869:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:51,869:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,869:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,869:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,870:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,870:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:51,870:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:51,870:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:51,870:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,870:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,870:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,870:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,870:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,871:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:51,871:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,871:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,871:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 19:56:51,871:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:51,879:INFO:Calculating mean and std
2025-06-11 19:56:51,879:INFO:Creating metrics dataframe
2025-06-11 19:56:51,881:INFO:Uploading results into container
2025-06-11 19:56:51,881:INFO:Uploading model into container now
2025-06-11 19:56:51,881:INFO:_master_model_container: 14
2025-06-11 19:56:51,881:INFO:_display_container: 2
2025-06-11 19:56:51,881:INFO:DummyClassifier(constant=None, random_state=404, strategy='prior')
2025-06-11 19:56:51,881:INFO:create_model() successfully completed......................................
2025-06-11 19:56:51,956:INFO:SubProcess create_model() end ==================================
2025-06-11 19:56:51,956:INFO:Creating metrics dataframe
2025-06-11 19:56:51,958:INFO:Initializing create_model()
2025-06-11 19:56:51,958:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 19:56:51,958:INFO:Checking exceptions
2025-06-11 19:56:51,960:INFO:Importing libraries
2025-06-11 19:56:51,960:INFO:Copying training dataset
2025-06-11 19:56:51,961:INFO:Defining folds
2025-06-11 19:56:51,961:INFO:Declaring metric variables
2025-06-11 19:56:51,961:INFO:Importing untrained model
2025-06-11 19:56:51,961:INFO:Declaring custom model
2025-06-11 19:56:51,961:INFO:Decision Tree Classifier Imported successfully
2025-06-11 19:56:51,961:INFO:Cross validation set to False
2025-06-11 19:56:51,961:INFO:Fitting Model
2025-06-11 19:56:51,972:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best')
2025-06-11 19:56:51,972:INFO:create_model() successfully completed......................................
2025-06-11 19:56:52,044:INFO:Creating Dashboard logs
2025-06-11 19:56:52,045:INFO:Model: Decision Tree Classifier
2025-06-11 19:56:52,066:INFO:Logged params: {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'random_state': 404, 'splitter': 'best'}
2025-06-11 19:56:52,154:INFO:Initializing predict_model()
2025-06-11 19:56:52,154:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000016D4EB52700>)
2025-06-11 19:56:52,154:INFO:Checking exceptions
2025-06-11 19:56:52,154:INFO:Preloading libraries
2025-06-11 19:56:52,186:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:52,187:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:52,188:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 19:56:52,268:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2025-06-11 19:56:52,381:INFO:Creating Dashboard logs
2025-06-11 19:56:52,381:INFO:Model: Random Forest Classifier
2025-06-11 19:56:52,404:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 404, 'verbose': 0, 'warm_start': False}
2025-06-11 19:56:52,596:INFO:Creating Dashboard logs
2025-06-11 19:56:52,596:INFO:Model: Gradient Boosting Classifier
2025-06-11 19:56:52,617:INFO:Logged params: {'ccp_alpha': 0.0, 'criterion': 'friedman_mse', 'init': None, 'learning_rate': 0.1, 'loss': 'log_loss', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_iter_no_change': None, 'random_state': 404, 'subsample': 1.0, 'tol': 0.0001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-06-11 19:56:52,811:INFO:Creating Dashboard logs
2025-06-11 19:56:52,811:INFO:Model: Light Gradient Boosting Machine
2025-06-11 19:56:52,833:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 404, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-06-11 19:56:53,032:INFO:Creating Dashboard logs
2025-06-11 19:56:53,032:INFO:Model: Extra Trees Classifier
2025-06-11 19:56:53,053:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 404, 'verbose': 0, 'warm_start': False}
2025-06-11 19:56:53,247:INFO:Creating Dashboard logs
2025-06-11 19:56:53,247:INFO:Model: Naive Bayes
2025-06-11 19:56:53,268:INFO:Logged params: {'priors': None, 'var_smoothing': 1e-09}
2025-06-11 19:56:53,460:INFO:Creating Dashboard logs
2025-06-11 19:56:53,460:INFO:Model: Linear Discriminant Analysis
2025-06-11 19:56:53,482:INFO:Logged params: {'covariance_estimator': None, 'n_components': None, 'priors': None, 'shrinkage': None, 'solver': 'svd', 'store_covariance': False, 'tol': 0.0001}
2025-06-11 19:56:53,671:INFO:Creating Dashboard logs
2025-06-11 19:56:53,671:INFO:Model: Ridge Classifier
2025-06-11 19:56:53,693:INFO:Logged params: {'alpha': 1.0, 'class_weight': None, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 404, 'solver': 'auto', 'tol': 0.0001}
2025-06-11 19:56:53,885:INFO:Creating Dashboard logs
2025-06-11 19:56:53,885:INFO:Model: K Neighbors Classifier
2025-06-11 19:56:53,917:INFO:Logged params: {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'minkowski', 'metric_params': None, 'n_jobs': -1, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
2025-06-11 19:56:54,121:INFO:Creating Dashboard logs
2025-06-11 19:56:54,121:INFO:Model: Logistic Regression
2025-06-11 19:56:54,142:INFO:Logged params: {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 404, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2025-06-11 19:56:54,340:INFO:Creating Dashboard logs
2025-06-11 19:56:54,341:INFO:Model: Ada Boost Classifier
2025-06-11 19:56:54,364:INFO:Logged params: {'algorithm': 'SAMME.R', 'base_estimator': 'deprecated', 'estimator': None, 'learning_rate': 1.0, 'n_estimators': 50, 'random_state': 404}
2025-06-11 19:56:54,554:INFO:Creating Dashboard logs
2025-06-11 19:56:54,554:INFO:Model: SVM - Linear Kernel
2025-06-11 19:56:54,576:INFO:Logged params: {'alpha': 0.0001, 'average': False, 'class_weight': None, 'early_stopping': False, 'epsilon': 0.1, 'eta0': 0.001, 'fit_intercept': True, 'l1_ratio': 0.15, 'learning_rate': 'optimal', 'loss': 'hinge', 'max_iter': 1000, 'n_iter_no_change': 5, 'n_jobs': -1, 'penalty': 'l2', 'power_t': 0.5, 'random_state': 404, 'shuffle': True, 'tol': 0.001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-06-11 19:56:54,764:INFO:Creating Dashboard logs
2025-06-11 19:56:54,765:INFO:Model: Dummy Classifier
2025-06-11 19:56:54,786:INFO:Logged params: {'constant': None, 'random_state': 404, 'strategy': 'prior'}
2025-06-11 19:56:54,973:INFO:Creating Dashboard logs
2025-06-11 19:56:54,973:INFO:Model: Quadratic Discriminant Analysis
2025-06-11 19:56:55,005:INFO:Logged params: {'priors': None, 'reg_param': 0.0, 'store_covariance': False, 'tol': 0.0001}
2025-06-11 19:56:55,226:INFO:_master_model_container: 14
2025-06-11 19:56:55,226:INFO:_display_container: 2
2025-06-11 19:56:55,226:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best')
2025-06-11 19:56:55,226:INFO:compare_models() successfully completed......................................
2025-06-11 19:56:55,227:INFO:Initializing evaluate_model()
2025-06-11 19:56:55,227:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best'), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-06-11 19:56:55,247:INFO:Initializing plot_model()
2025-06-11 19:56:55,247:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000016D4C3D1090>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best'), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2025-06-11 19:56:55,247:INFO:Checking exceptions
2025-06-11 19:56:55,248:INFO:Preloading libraries
2025-06-11 19:56:55,249:INFO:Copying training dataset
2025-06-11 19:56:55,249:INFO:Plot type: pipeline
2025-06-11 19:57:08,241:INFO:Visual Rendered Successfully
2025-06-11 19:57:08,323:INFO:plot_model() successfully completed......................................
2025-06-11 19:57:08,325:INFO:Initializing save_model()
2025-06-11 19:57:08,325:INFO:save_model(model=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best'), model_name=credit_risk_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-11 19:57:08,325:INFO:Adding model into prep_pipe
2025-06-11 19:57:08,328:INFO:credit_risk_model.pkl saved in current working directory
2025-06-11 19:57:08,330:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('trained_model',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=404, splitter='best'))],
         verbose=False)
2025-06-11 19:57:08,330:INFO:save_model() successfully completed......................................
2025-06-11 19:57:52,967:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:57:52,967:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:57:52,967:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:57:52,967:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 19:57:53,395:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 19:57:53,561:INFO:Initializing load_model()
2025-06-11 19:57:53,561:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:01:24,954:INFO:Initializing predict_model()
2025-06-11 20:01:24,954:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C0EF67F5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('trained_model', DecisionTreeClassifier(random_state=404))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C0F0BBDEE0>)
2025-06-11 20:01:24,954:INFO:Checking exceptions
2025-06-11 20:01:24,954:INFO:Preloading libraries
2025-06-11 20:01:24,955:INFO:Set up data.
2025-06-11 20:01:24,956:INFO:Set up index.
2025-06-11 20:09:24,048:INFO:Initializing predict_model()
2025-06-11 20:09:24,048:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C0F0AC4B50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('trained_model', DecisionTreeClassifier(random_state=404))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C0F0B462A0>)
2025-06-11 20:09:24,049:INFO:Checking exceptions
2025-06-11 20:09:24,049:INFO:Preloading libraries
2025-06-11 20:09:24,049:INFO:Set up data.
2025-06-11 20:09:24,050:INFO:Set up index.
2025-06-11 20:09:39,796:INFO:Initializing predict_model()
2025-06-11 20:09:39,796:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C0F0AC3690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('trained_model', DecisionTreeClassifier(random_state=404))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C087D5AA20>)
2025-06-11 20:09:39,796:INFO:Checking exceptions
2025-06-11 20:09:39,796:INFO:Preloading libraries
2025-06-11 20:09:39,796:INFO:Set up data.
2025-06-11 20:09:39,797:INFO:Set up index.
2025-06-11 20:10:00,155:INFO:Initializing predict_model()
2025-06-11 20:10:00,155:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C0F0AC2ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('trained_model', DecisionTreeClassifier(random_state=404))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C0F0B78EA0>)
2025-06-11 20:10:00,155:INFO:Checking exceptions
2025-06-11 20:10:00,155:INFO:Preloading libraries
2025-06-11 20:10:00,155:INFO:Set up data.
2025-06-11 20:10:00,156:INFO:Set up index.
2025-06-11 20:10:11,591:INFO:Initializing predict_model()
2025-06-11 20:10:11,591:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C0EF5CCB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('trained_model', DecisionTreeClassifier(random_state=404))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C0F0A86160>)
2025-06-11 20:10:11,591:INFO:Checking exceptions
2025-06-11 20:10:11,591:INFO:Preloading libraries
2025-06-11 20:10:11,591:INFO:Set up data.
2025-06-11 20:10:11,592:INFO:Set up index.
2025-06-11 20:17:44,234:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:44,234:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:44,234:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:44,234:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:44,785:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:17:44,981:INFO:Initializing load_model()
2025-06-11 20:17:44,981:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:17:46,658:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:46,659:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:46,659:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:46,659:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:47,124:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:17:47,281:INFO:Initializing load_model()
2025-06-11 20:17:47,283:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:17:54,307:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:54,307:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:54,307:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:54,307:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:54,777:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:17:54,955:INFO:Initializing load_model()
2025-06-11 20:17:54,955:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:17:56,741:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:56,741:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:56,741:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:56,741:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:17:57,214:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:17:57,385:INFO:Initializing load_model()
2025-06-11 20:17:57,386:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:18:18,679:INFO:Initializing predict_model()
2025-06-11 20:18:18,679:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000018A77B18550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('trained_model', DecisionTreeClassifier(random_state=404))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000018A77C45620>)
2025-06-11 20:18:18,680:INFO:Checking exceptions
2025-06-11 20:18:18,680:INFO:Preloading libraries
2025-06-11 20:18:18,680:INFO:Set up data.
2025-06-11 20:18:18,681:INFO:Set up index.
2025-06-11 20:27:59,647:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:27:59,647:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:27:59,647:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:27:59,647:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:28:00,125:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:28:00,301:INFO:Initializing load_model()
2025-06-11 20:28:00,301:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:28:04,122:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:28:04,122:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:28:04,122:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:28:04,122:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:28:04,639:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:28:04,819:INFO:Initializing load_model()
2025-06-11 20:28:04,820:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:28:45,330:INFO:Initializing predict_model()
2025-06-11 20:28:45,330:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ACFDA7F5D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('trained_model', DecisionTreeClassifier(random_state=404))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001ACFEFE9F80>)
2025-06-11 20:28:45,330:INFO:Checking exceptions
2025-06-11 20:28:45,330:INFO:Preloading libraries
2025-06-11 20:28:45,331:INFO:Set up data.
2025-06-11 20:28:45,332:INFO:Set up index.
2025-06-11 20:31:11,121:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:11,121:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:11,121:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:11,121:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:11,511:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:31:13,847:INFO:PyCaret ClassificationExperiment
2025-06-11 20:31:13,847:INFO:Logging name: riesgo_credito_multiclase
2025-06-11 20:31:13,847:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-06-11 20:31:13,847:INFO:version 3.2.0
2025-06-11 20:31:13,847:INFO:Initializing setup()
2025-06-11 20:31:13,848:INFO:self.USI: 0735
2025-06-11 20:31:13,848:INFO:self._variable_keys: {'target_param', 'seed', 'USI', 'memory', 'pipeline', '_available_plots', 'X_train', 'y_test', 'idx', 'is_multiclass', 'y_train', 'gpu_n_jobs_param', 'log_plots_param', 'fix_imbalance', 'fold_groups_param', 'exp_name_log', 'fold_shuffle_param', 'html_param', 'X_test', '_ml_usecase', 'gpu_param', 'y', 'exp_id', 'data', 'X', 'logging_param', 'n_jobs_param', 'fold_generator'}
2025-06-11 20:31:13,848:INFO:Checking environment
2025-06-11 20:31:13,848:INFO:python_version: 3.11.0
2025-06-11 20:31:13,848:INFO:python_build: ('main', 'Oct 24 2022 18:26:48')
2025-06-11 20:31:13,848:INFO:machine: AMD64
2025-06-11 20:31:13,862:INFO:platform: Windows-10-10.0.26100-SP0
2025-06-11 20:31:13,870:INFO:Memory: svmem(total=102695145472, available=77627895808, percent=24.4, used=25067249664, free=77627895808)
2025-06-11 20:31:13,871:INFO:Physical Core: 16
2025-06-11 20:31:13,871:INFO:Logical Core: 32
2025-06-11 20:31:13,871:INFO:Checking libraries
2025-06-11 20:31:13,871:INFO:System:
2025-06-11 20:31:13,871:INFO:    python: 3.11.0 (main, Oct 24 2022, 18:26:48) [MSC v.1933 64 bit (AMD64)]
2025-06-11 20:31:13,871:INFO:executable: C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\python.exe
2025-06-11 20:31:13,871:INFO:   machine: Windows-10-10.0.26100-SP0
2025-06-11 20:31:13,871:INFO:PyCaret required dependencies:
2025-06-11 20:31:13,907:INFO:                 pip: 22.3
2025-06-11 20:31:13,907:INFO:          setuptools: 65.5.0
2025-06-11 20:31:13,907:INFO:             pycaret: 3.2.0
2025-06-11 20:31:13,907:INFO:             IPython: 9.1.0
2025-06-11 20:31:13,907:INFO:          ipywidgets: 8.1.7
2025-06-11 20:31:13,907:INFO:                tqdm: 4.67.1
2025-06-11 20:31:13,907:INFO:               numpy: 1.25.2
2025-06-11 20:31:13,907:INFO:              pandas: 1.5.3
2025-06-11 20:31:13,908:INFO:              jinja2: 3.1.6
2025-06-11 20:31:13,908:INFO:               scipy: 1.10.1
2025-06-11 20:31:13,908:INFO:              joblib: 1.3.2
2025-06-11 20:31:13,908:INFO:             sklearn: 1.2.2
2025-06-11 20:31:13,908:INFO:                pyod: 2.0.5
2025-06-11 20:31:13,908:INFO:            imblearn: 0.12.4
2025-06-11 20:31:13,908:INFO:   category_encoders: 2.7.0
2025-06-11 20:31:13,908:INFO:            lightgbm: 4.6.0
2025-06-11 20:31:13,908:INFO:               numba: 0.61.0
2025-06-11 20:31:13,908:INFO:            requests: 2.32.3
2025-06-11 20:31:13,908:INFO:          matplotlib: 3.6.0
2025-06-11 20:31:13,908:INFO:          scikitplot: 0.3.7
2025-06-11 20:31:13,908:INFO:         yellowbrick: 1.5
2025-06-11 20:31:13,908:INFO:              plotly: 5.24.1
2025-06-11 20:31:13,908:INFO:    plotly-resampler: Not installed
2025-06-11 20:31:13,908:INFO:             kaleido: 0.2.1
2025-06-11 20:31:13,908:INFO:           schemdraw: 0.15
2025-06-11 20:31:13,908:INFO:         statsmodels: 0.14.4
2025-06-11 20:31:13,908:INFO:              sktime: 0.21.1
2025-06-11 20:31:13,908:INFO:               tbats: 1.1.3
2025-06-11 20:31:13,908:INFO:            pmdarima: 2.0.4
2025-06-11 20:31:13,908:INFO:              psutil: 7.0.0
2025-06-11 20:31:13,908:INFO:          markupsafe: 3.0.2
2025-06-11 20:31:13,908:INFO:             pickle5: Not installed
2025-06-11 20:31:13,908:INFO:         cloudpickle: 2.2.1
2025-06-11 20:31:13,908:INFO:         deprecation: 2.1.0
2025-06-11 20:31:13,908:INFO:              xxhash: 3.5.0
2025-06-11 20:31:13,908:INFO:           wurlitzer: Not installed
2025-06-11 20:31:13,908:INFO:PyCaret optional dependencies:
2025-06-11 20:31:14,066:INFO:                shap: 0.44.1
2025-06-11 20:31:14,066:INFO:           interpret: 0.6.10
2025-06-11 20:31:14,066:INFO:                umap: 0.5.7
2025-06-11 20:31:14,066:INFO:     ydata_profiling: 4.16.1
2025-06-11 20:31:14,066:INFO:  explainerdashboard: 0.4.8
2025-06-11 20:31:14,066:INFO:             autoviz: Not installed
2025-06-11 20:31:14,066:INFO:           fairlearn: 0.7.0
2025-06-11 20:31:14,066:INFO:          deepchecks: Not installed
2025-06-11 20:31:14,066:INFO:             xgboost: Not installed
2025-06-11 20:31:14,066:INFO:            catboost: Not installed
2025-06-11 20:31:14,066:INFO:              kmodes: Not installed
2025-06-11 20:31:14,066:INFO:             mlxtend: Not installed
2025-06-11 20:31:14,066:INFO:       statsforecast: Not installed
2025-06-11 20:31:14,066:INFO:        tune_sklearn: Not installed
2025-06-11 20:31:14,066:INFO:                 ray: Not installed
2025-06-11 20:31:14,066:INFO:            hyperopt: Not installed
2025-06-11 20:31:14,066:INFO:              optuna: Not installed
2025-06-11 20:31:14,066:INFO:               skopt: Not installed
2025-06-11 20:31:14,066:INFO:              mlflow: 2.22.0
2025-06-11 20:31:14,066:INFO:              gradio: Not installed
2025-06-11 20:31:14,066:INFO:             fastapi: 0.115.12
2025-06-11 20:31:14,066:INFO:             uvicorn: 0.34.2
2025-06-11 20:31:14,066:INFO:              m2cgen: Not installed
2025-06-11 20:31:14,066:INFO:           evidently: Not installed
2025-06-11 20:31:14,066:INFO:               fugue: Not installed
2025-06-11 20:31:14,066:INFO:           streamlit: 1.45.1
2025-06-11 20:31:14,066:INFO:             prophet: Not installed
2025-06-11 20:31:14,066:INFO:None
2025-06-11 20:31:14,066:INFO:Set up data.
2025-06-11 20:31:14,068:INFO:Set up folding strategy.
2025-06-11 20:31:14,068:INFO:Set up train/test split.
2025-06-11 20:31:14,071:INFO:Set up index.
2025-06-11 20:31:14,071:INFO:Assigning column types.
2025-06-11 20:31:14,071:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-06-11 20:31:14,090:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-11 20:31:14,091:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 20:31:14,104:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,104:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,123:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-11 20:31:14,123:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 20:31:14,134:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,134:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,134:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-06-11 20:31:14,153:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 20:31:14,164:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,164:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,183:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 20:31:14,194:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,194:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,194:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-06-11 20:31:14,224:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,224:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,254:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,254:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,255:INFO:Preparing preprocessing pipeline...
2025-06-11 20:31:14,256:INFO:Set up label encoding.
2025-06-11 20:31:14,256:INFO:Set up simple imputation.
2025-06-11 20:31:14,257:INFO:Set up encoding of categorical features.
2025-06-11 20:31:14,274:INFO:Finished creating preprocessing pipeline.
2025-06-11 20:31:14,277:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-06-11 20:31:14,277:INFO:Creating final display dataframe.
2025-06-11 20:31:14,329:INFO:Setup _display_container:                     Description                       Value
0                    Session id                         404
1                        Target                  risk_level
2                   Target type                  Multiclass
3                Target mapping  alto: 0, bajo: 1, medio: 2
4           Original data shape                   (1000, 8)
5        Transformed data shape                  (1000, 12)
6   Transformed train set shape                   (700, 12)
7    Transformed test set shape                   (300, 12)
8              Numeric features                           6
9          Categorical features                           1
10                   Preprocess                        True
11              Imputation type                      simple
12           Numeric imputation                        mean
13       Categorical imputation                        mode
14     Maximum one-hot encoding                          25
15              Encoding method                        None
16               Fold Generator             StratifiedKFold
17                  Fold Number                          10
18                     CPU Jobs                          -1
19                      Use GPU                       False
20               Log Experiment                MlflowLogger
21              Experiment Name   riesgo_credito_multiclase
22                          USI                        0735
2025-06-11 20:31:14,361:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,361:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,392:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,392:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:14,393:INFO:Logging experiment in loggers
2025-06-11 20:31:14,536:INFO:SubProcess save_model() called ==================================
2025-06-11 20:31:14,539:INFO:Initializing save_model()
2025-06-11 20:31:14,539:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), model_name=C:\Users\BRANGO~1\AppData\Local\Temp\tmp1a9sjd6_\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-11 20:31:14,539:INFO:Adding model into prep_pipe
2025-06-11 20:31:14,539:WARNING:Only Model saved as it was a pipeline.
2025-06-11 20:31:14,542:INFO:C:\Users\BRANGO~1\AppData\Local\Temp\tmp1a9sjd6_\Transformation Pipeline.pkl saved in current working directory
2025-06-11 20:31:14,544:INFO:Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-06-11 20:31:14,544:INFO:save_model() successfully completed......................................
2025-06-11 20:31:14,616:INFO:SubProcess save_model() end ==================================
2025-06-11 20:31:14,650:INFO:setup() successfully completed in 0.55s...............
2025-06-11 20:31:14,650:INFO:Initializing compare_models()
2025-06-11 20:31:14,650:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-06-11 20:31:14,650:INFO:Checking exceptions
2025-06-11 20:31:14,651:INFO:Preparing display monitor
2025-06-11 20:31:14,653:INFO:Initializing Logistic Regression
2025-06-11 20:31:14,653:INFO:Total runtime is 0.0 minutes
2025-06-11 20:31:14,653:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:14,653:INFO:Initializing create_model()
2025-06-11 20:31:14,653:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BFFF72D590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:14,653:INFO:Checking exceptions
2025-06-11 20:31:14,653:INFO:Importing libraries
2025-06-11 20:31:14,653:INFO:Copying training dataset
2025-06-11 20:31:14,654:INFO:Defining folds
2025-06-11 20:31:14,654:INFO:Declaring metric variables
2025-06-11 20:31:14,654:INFO:Importing untrained model
2025-06-11 20:31:14,654:INFO:Logistic Regression Imported successfully
2025-06-11 20:31:14,654:INFO:Starting cross validation
2025-06-11 20:31:14,654:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:16,472:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 20:31:16,482:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,482:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,483:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,494:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 20:31:16,499:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 20:31:16,502:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 20:31:16,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 20:31:16,506:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,507:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,509:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,511:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,511:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,512:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,512:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,513:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,515:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,516:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,517:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,522:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 20:31:16,527:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 20:31:16,529:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 20:31:16,531:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 20:31:16,532:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,533:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,534:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,536:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,537:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,538:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,538:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,539:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,540:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,541:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-06-11 20:31:16,541:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,542:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,543:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,551:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,552:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,553:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:16,560:INFO:Calculating mean and std
2025-06-11 20:31:16,560:INFO:Creating metrics dataframe
2025-06-11 20:31:16,561:INFO:Uploading results into container
2025-06-11 20:31:16,561:INFO:Uploading model into container now
2025-06-11 20:31:16,562:INFO:_master_model_container: 1
2025-06-11 20:31:16,562:INFO:_display_container: 2
2025-06-11 20:31:16,562:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=404, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-06-11 20:31:16,562:INFO:create_model() successfully completed......................................
2025-06-11 20:31:16,636:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:16,637:INFO:Creating metrics dataframe
2025-06-11 20:31:16,639:INFO:Initializing K Neighbors Classifier
2025-06-11 20:31:16,639:INFO:Total runtime is 0.033094370365142824 minutes
2025-06-11 20:31:16,639:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:16,639:INFO:Initializing create_model()
2025-06-11 20:31:16,639:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BFFF72D590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:16,639:INFO:Checking exceptions
2025-06-11 20:31:16,639:INFO:Importing libraries
2025-06-11 20:31:16,639:INFO:Copying training dataset
2025-06-11 20:31:16,640:INFO:Defining folds
2025-06-11 20:31:16,640:INFO:Declaring metric variables
2025-06-11 20:31:16,640:INFO:Importing untrained model
2025-06-11 20:31:16,640:INFO:K Neighbors Classifier Imported successfully
2025-06-11 20:31:16,640:INFO:Starting cross validation
2025-06-11 20:31:16,641:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:18,025:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,026:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,027:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:18,027:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,030:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,031:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,031:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,031:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:18,031:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,032:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,032:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,032:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,033:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,035:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,051:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,052:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,052:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,052:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,053:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,053:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,053:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,055:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,055:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:18,056:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,056:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,057:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,057:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:18,058:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,059:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,059:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,061:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:18,062:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,066:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,068:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,069:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:18,075:INFO:Calculating mean and std
2025-06-11 20:31:18,076:INFO:Creating metrics dataframe
2025-06-11 20:31:18,077:INFO:Uploading results into container
2025-06-11 20:31:18,077:INFO:Uploading model into container now
2025-06-11 20:31:18,078:INFO:_master_model_container: 2
2025-06-11 20:31:18,078:INFO:_display_container: 2
2025-06-11 20:31:18,078:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-06-11 20:31:18,078:INFO:create_model() successfully completed......................................
2025-06-11 20:31:18,158:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:18,158:INFO:Creating metrics dataframe
2025-06-11 20:31:18,160:INFO:Initializing Naive Bayes
2025-06-11 20:31:18,160:INFO:Total runtime is 0.05843813419342041 minutes
2025-06-11 20:31:18,160:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:18,160:INFO:Initializing create_model()
2025-06-11 20:31:18,160:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BFFF72D590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:18,160:INFO:Checking exceptions
2025-06-11 20:31:18,160:INFO:Importing libraries
2025-06-11 20:31:18,160:INFO:Copying training dataset
2025-06-11 20:31:18,161:INFO:Defining folds
2025-06-11 20:31:18,161:INFO:Declaring metric variables
2025-06-11 20:31:18,161:INFO:Importing untrained model
2025-06-11 20:31:18,161:INFO:Naive Bayes Imported successfully
2025-06-11 20:31:18,161:INFO:Starting cross validation
2025-06-11 20:31:18,161:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:19,529:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,530:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,530:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,531:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,531:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,531:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,531:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,532:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,543:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,544:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,545:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,552:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,553:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,553:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,554:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,554:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,554:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,554:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,556:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,556:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,557:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,557:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,557:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,558:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,558:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,558:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,558:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,559:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,561:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,568:INFO:Calculating mean and std
2025-06-11 20:31:19,569:INFO:Creating metrics dataframe
2025-06-11 20:31:19,570:INFO:Uploading results into container
2025-06-11 20:31:19,570:INFO:Uploading model into container now
2025-06-11 20:31:19,571:INFO:_master_model_container: 3
2025-06-11 20:31:19,571:INFO:_display_container: 2
2025-06-11 20:31:19,571:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-06-11 20:31:19,571:INFO:create_model() successfully completed......................................
2025-06-11 20:31:19,655:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:19,655:INFO:Creating metrics dataframe
2025-06-11 20:31:19,656:INFO:Initializing Decision Tree Classifier
2025-06-11 20:31:19,656:INFO:Total runtime is 0.08338490724563599 minutes
2025-06-11 20:31:19,657:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:19,657:INFO:Initializing create_model()
2025-06-11 20:31:19,657:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BFFF72D590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:19,657:INFO:Checking exceptions
2025-06-11 20:31:19,657:INFO:Importing libraries
2025-06-11 20:31:19,657:INFO:Copying training dataset
2025-06-11 20:31:19,658:INFO:Defining folds
2025-06-11 20:31:19,658:INFO:Declaring metric variables
2025-06-11 20:31:19,658:INFO:Importing untrained model
2025-06-11 20:31:19,658:INFO:Decision Tree Classifier Imported successfully
2025-06-11 20:31:19,658:INFO:Starting cross validation
2025-06-11 20:31:19,658:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:19,684:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,684:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,685:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,685:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,685:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,685:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,685:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,685:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,685:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,686:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,686:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,686:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,686:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,686:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,686:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,686:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,687:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,687:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,687:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,687:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,687:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,687:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,688:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:19,688:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,709:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,709:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,711:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,711:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,711:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,712:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,720:INFO:Calculating mean and std
2025-06-11 20:31:20,721:INFO:Creating metrics dataframe
2025-06-11 20:31:20,722:INFO:Uploading results into container
2025-06-11 20:31:20,722:INFO:Uploading model into container now
2025-06-11 20:31:20,722:INFO:_master_model_container: 4
2025-06-11 20:31:20,723:INFO:_display_container: 2
2025-06-11 20:31:20,723:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best')
2025-06-11 20:31:20,723:INFO:create_model() successfully completed......................................
2025-06-11 20:31:20,801:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:20,801:INFO:Creating metrics dataframe
2025-06-11 20:31:20,802:INFO:Initializing SVM - Linear Kernel
2025-06-11 20:31:20,802:INFO:Total runtime is 0.10248334010442098 minutes
2025-06-11 20:31:20,802:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:20,802:INFO:Initializing create_model()
2025-06-11 20:31:20,802:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BFFF72D590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:20,802:INFO:Checking exceptions
2025-06-11 20:31:20,802:INFO:Importing libraries
2025-06-11 20:31:20,802:INFO:Copying training dataset
2025-06-11 20:31:20,803:INFO:Defining folds
2025-06-11 20:31:20,803:INFO:Declaring metric variables
2025-06-11 20:31:20,804:INFO:Importing untrained model
2025-06-11 20:31:20,804:INFO:SVM - Linear Kernel Imported successfully
2025-06-11 20:31:20,804:INFO:Starting cross validation
2025-06-11 20:31:20,804:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:20,848:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 20:31:20,848:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 20:31:20,850:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 20:31:20,850:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 20:31:20,850:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,850:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 20:31:20,850:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,850:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,850:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,850:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,850:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,852:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:20,851:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\utils\_available_if.py", line 32, in __get__
    if not self.check(obj):
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1235, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2025-06-11 20:31:20,852:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:20,852:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,852:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,852:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,852:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,852:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,852:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:20,852:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,852:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,852:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,853:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:20,853:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,853:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,854:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,860:INFO:Calculating mean and std
2025-06-11 20:31:20,861:INFO:Creating metrics dataframe
2025-06-11 20:31:20,862:INFO:Uploading results into container
2025-06-11 20:31:20,863:INFO:Uploading model into container now
2025-06-11 20:31:20,863:INFO:_master_model_container: 5
2025-06-11 20:31:20,863:INFO:_display_container: 2
2025-06-11 20:31:20,863:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=404, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-06-11 20:31:20,863:INFO:create_model() successfully completed......................................
2025-06-11 20:31:20,943:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:20,943:INFO:Creating metrics dataframe
2025-06-11 20:31:20,944:INFO:Initializing Ridge Classifier
2025-06-11 20:31:20,944:INFO:Total runtime is 0.10484890937805176 minutes
2025-06-11 20:31:20,944:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:20,944:INFO:Initializing create_model()
2025-06-11 20:31:20,944:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BFFF72D590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:20,944:INFO:Checking exceptions
2025-06-11 20:31:20,944:INFO:Importing libraries
2025-06-11 20:31:20,944:INFO:Copying training dataset
2025-06-11 20:31:20,946:INFO:Defining folds
2025-06-11 20:31:20,946:INFO:Declaring metric variables
2025-06-11 20:31:20,946:INFO:Importing untrained model
2025-06-11 20:31:20,947:INFO:Ridge Classifier Imported successfully
2025-06-11 20:31:20,947:INFO:Starting cross validation
2025-06-11 20:31:20,947:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:20,970:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 20:31:20,971:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,971:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,971:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 20:31:20,972:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 20:31:20,972:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,972:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 20:31:20,972:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,972:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 20:31:20,972:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,972:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,972:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 20:31:20,973:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,973:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,973:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,973:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,973:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 20:31:20,973:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,973:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,973:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,973:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 20:31:20,973:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,973:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,973:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,973:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py:190: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 76, in _cached_call
    return cache[method]
           ~~~~~^^^^^^^^
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\metrics.py", line 182, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 316, in _score
    y_pred = method_caller(clf, "predict_proba", X)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_scorer.py", line 78, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pipeline.py", line 127, in __getattr__
    return getattr(self._final_estimator, name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2025-06-11 20:31:20,974:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,974:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,974:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,974:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,974:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,974:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,974:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,974:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,974:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,974:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,974:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,976:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,976:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:20,982:INFO:Calculating mean and std
2025-06-11 20:31:20,982:INFO:Creating metrics dataframe
2025-06-11 20:31:20,983:INFO:Uploading results into container
2025-06-11 20:31:20,984:INFO:Uploading model into container now
2025-06-11 20:31:20,984:INFO:_master_model_container: 6
2025-06-11 20:31:20,984:INFO:_display_container: 2
2025-06-11 20:31:20,984:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=404, solver='auto',
                tol=0.0001)
2025-06-11 20:31:20,984:INFO:create_model() successfully completed......................................
2025-06-11 20:31:21,059:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:21,059:INFO:Creating metrics dataframe
2025-06-11 20:31:21,061:INFO:Initializing Random Forest Classifier
2025-06-11 20:31:21,061:INFO:Total runtime is 0.10679397980372111 minutes
2025-06-11 20:31:21,061:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:21,061:INFO:Initializing create_model()
2025-06-11 20:31:21,061:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BFFF72D590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:21,061:INFO:Checking exceptions
2025-06-11 20:31:21,061:INFO:Importing libraries
2025-06-11 20:31:21,061:INFO:Copying training dataset
2025-06-11 20:31:21,062:INFO:Defining folds
2025-06-11 20:31:21,062:INFO:Declaring metric variables
2025-06-11 20:31:21,063:INFO:Importing untrained model
2025-06-11 20:31:21,063:INFO:Random Forest Classifier Imported successfully
2025-06-11 20:31:21,063:INFO:Starting cross validation
2025-06-11 20:31:21,063:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:21,229:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,230:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,231:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,231:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,231:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,231:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,231:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,231:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,231:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,232:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,232:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,233:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,233:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,233:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,233:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,233:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,233:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,233:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,234:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,234:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,234:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,234:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,235:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,235:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,236:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,236:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,237:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,238:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,239:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,239:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,243:INFO:Calculating mean and std
2025-06-11 20:31:21,243:INFO:Creating metrics dataframe
2025-06-11 20:31:21,244:INFO:Uploading results into container
2025-06-11 20:31:21,244:INFO:Uploading model into container now
2025-06-11 20:31:21,244:INFO:_master_model_container: 7
2025-06-11 20:31:21,244:INFO:_display_container: 2
2025-06-11 20:31:21,244:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=404, verbose=0, warm_start=False)
2025-06-11 20:31:21,244:INFO:create_model() successfully completed......................................
2025-06-11 20:31:21,318:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:21,318:INFO:Creating metrics dataframe
2025-06-11 20:31:21,319:INFO:Initializing Quadratic Discriminant Analysis
2025-06-11 20:31:21,319:INFO:Total runtime is 0.11110053459803264 minutes
2025-06-11 20:31:21,319:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:21,319:INFO:Initializing create_model()
2025-06-11 20:31:21,319:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BFFF72D590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:21,319:INFO:Checking exceptions
2025-06-11 20:31:21,319:INFO:Importing libraries
2025-06-11 20:31:21,319:INFO:Copying training dataset
2025-06-11 20:31:21,321:INFO:Defining folds
2025-06-11 20:31:21,321:INFO:Declaring metric variables
2025-06-11 20:31:21,321:INFO:Importing untrained model
2025-06-11 20:31:21,322:INFO:Quadratic Discriminant Analysis Imported successfully
2025-06-11 20:31:21,322:INFO:Starting cross validation
2025-06-11 20:31:21,322:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:21,339:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 20:31:21,339:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 20:31:21,339:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 20:31:21,340:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 20:31:21,340:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 20:31:21,340:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 20:31:21,341:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 20:31:21,341:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 20:31:21,341:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 20:31:21,342:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:926: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-06-11 20:31:21,347:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,347:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,347:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,348:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,348:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,348:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,348:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,348:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,348:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,349:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,349:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,349:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,349:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,349:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,349:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,349:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,349:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,349:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,350:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,350:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,350:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,350:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,350:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,350:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,351:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,351:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,351:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,351:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,357:INFO:Calculating mean and std
2025-06-11 20:31:21,357:INFO:Creating metrics dataframe
2025-06-11 20:31:21,359:INFO:Uploading results into container
2025-06-11 20:31:21,359:INFO:Uploading model into container now
2025-06-11 20:31:21,359:INFO:_master_model_container: 8
2025-06-11 20:31:21,359:INFO:_display_container: 2
2025-06-11 20:31:21,360:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-06-11 20:31:21,360:INFO:create_model() successfully completed......................................
2025-06-11 20:31:21,438:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:21,438:INFO:Creating metrics dataframe
2025-06-11 20:31:21,440:INFO:Initializing Ada Boost Classifier
2025-06-11 20:31:21,440:INFO:Total runtime is 0.11310448646545411 minutes
2025-06-11 20:31:21,440:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:21,440:INFO:Initializing create_model()
2025-06-11 20:31:21,440:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BFFF72D590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:21,440:INFO:Checking exceptions
2025-06-11 20:31:21,440:INFO:Importing libraries
2025-06-11 20:31:21,440:INFO:Copying training dataset
2025-06-11 20:31:21,441:INFO:Defining folds
2025-06-11 20:31:21,441:INFO:Declaring metric variables
2025-06-11 20:31:21,441:INFO:Importing untrained model
2025-06-11 20:31:21,441:INFO:Ada Boost Classifier Imported successfully
2025-06-11 20:31:21,441:INFO:Starting cross validation
2025-06-11 20:31:21,441:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:21,499:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,499:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,499:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,499:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,501:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,501:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,501:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,501:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,501:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:21,501:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:21,502:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,502:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,502:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:21,502:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,502:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,502:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,502:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,502:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,502:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,502:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,503:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,503:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,503:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,503:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,503:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,504:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,504:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,504:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,507:INFO:Calculating mean and std
2025-06-11 20:31:21,507:INFO:Creating metrics dataframe
2025-06-11 20:31:21,508:INFO:Uploading results into container
2025-06-11 20:31:21,509:INFO:Uploading model into container now
2025-06-11 20:31:21,509:INFO:_master_model_container: 9
2025-06-11 20:31:21,509:INFO:_display_container: 2
2025-06-11 20:31:21,509:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator='deprecated',
                   estimator=None, learning_rate=1.0, n_estimators=50,
                   random_state=404)
2025-06-11 20:31:21,509:INFO:create_model() successfully completed......................................
2025-06-11 20:31:21,576:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:21,576:INFO:Creating metrics dataframe
2025-06-11 20:31:21,578:INFO:Initializing Gradient Boosting Classifier
2025-06-11 20:31:21,578:INFO:Total runtime is 0.11542008717854818 minutes
2025-06-11 20:31:21,578:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:21,578:INFO:Initializing create_model()
2025-06-11 20:31:21,578:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BFFF72D590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:21,578:INFO:Checking exceptions
2025-06-11 20:31:21,578:INFO:Importing libraries
2025-06-11 20:31:21,578:INFO:Copying training dataset
2025-06-11 20:31:21,579:INFO:Defining folds
2025-06-11 20:31:21,579:INFO:Declaring metric variables
2025-06-11 20:31:21,579:INFO:Importing untrained model
2025-06-11 20:31:21,579:INFO:Gradient Boosting Classifier Imported successfully
2025-06-11 20:31:21,579:INFO:Starting cross validation
2025-06-11 20:31:21,579:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:21,823:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,824:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,826:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,827:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,827:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,828:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,828:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,829:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,829:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,829:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,829:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,829:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,830:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,830:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,830:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,831:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,831:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,832:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,832:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,834:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,835:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,836:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,837:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,838:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,839:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,839:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,840:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,841:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,851:INFO:Calculating mean and std
2025-06-11 20:31:21,851:INFO:Creating metrics dataframe
2025-06-11 20:31:21,853:INFO:Uploading results into container
2025-06-11 20:31:21,853:INFO:Uploading model into container now
2025-06-11 20:31:21,853:INFO:_master_model_container: 10
2025-06-11 20:31:21,853:INFO:_display_container: 2
2025-06-11 20:31:21,853:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=404, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-06-11 20:31:21,853:INFO:create_model() successfully completed......................................
2025-06-11 20:31:21,912:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:21,912:INFO:Creating metrics dataframe
2025-06-11 20:31:21,913:INFO:Initializing Linear Discriminant Analysis
2025-06-11 20:31:21,913:INFO:Total runtime is 0.1209959109624227 minutes
2025-06-11 20:31:21,913:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:21,913:INFO:Initializing create_model()
2025-06-11 20:31:21,913:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BFFF72D590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:21,913:INFO:Checking exceptions
2025-06-11 20:31:21,913:INFO:Importing libraries
2025-06-11 20:31:21,913:INFO:Copying training dataset
2025-06-11 20:31:21,915:INFO:Defining folds
2025-06-11 20:31:21,915:INFO:Declaring metric variables
2025-06-11 20:31:21,916:INFO:Importing untrained model
2025-06-11 20:31:21,916:INFO:Linear Discriminant Analysis Imported successfully
2025-06-11 20:31:21,916:INFO:Starting cross validation
2025-06-11 20:31:21,916:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:21,941:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,941:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,941:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,942:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,942:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,942:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,942:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,942:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,942:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,942:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,942:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,942:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,942:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,943:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,943:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,943:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,943:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,943:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,943:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,943:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,943:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,943:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,944:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,944:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:21,951:INFO:Calculating mean and std
2025-06-11 20:31:21,951:INFO:Creating metrics dataframe
2025-06-11 20:31:21,952:INFO:Uploading results into container
2025-06-11 20:31:21,952:INFO:Uploading model into container now
2025-06-11 20:31:21,952:INFO:_master_model_container: 11
2025-06-11 20:31:21,952:INFO:_display_container: 2
2025-06-11 20:31:21,952:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-06-11 20:31:21,952:INFO:create_model() successfully completed......................................
2025-06-11 20:31:22,022:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:22,022:INFO:Creating metrics dataframe
2025-06-11 20:31:22,024:INFO:Initializing Extra Trees Classifier
2025-06-11 20:31:22,024:INFO:Total runtime is 0.12284884055455526 minutes
2025-06-11 20:31:22,024:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:22,024:INFO:Initializing create_model()
2025-06-11 20:31:22,024:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BFFF72D590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:22,024:INFO:Checking exceptions
2025-06-11 20:31:22,024:INFO:Importing libraries
2025-06-11 20:31:22,024:INFO:Copying training dataset
2025-06-11 20:31:22,024:INFO:Defining folds
2025-06-11 20:31:22,024:INFO:Declaring metric variables
2025-06-11 20:31:22,024:INFO:Importing untrained model
2025-06-11 20:31:22,026:INFO:Extra Trees Classifier Imported successfully
2025-06-11 20:31:22,026:INFO:Starting cross validation
2025-06-11 20:31:22,026:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:22,171:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,172:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,172:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,173:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,173:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,173:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,173:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,175:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,176:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,177:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,178:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,179:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,182:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,182:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,182:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,183:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,183:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,183:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,183:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,184:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,184:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,184:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,184:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,184:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,184:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,184:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,184:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,185:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,187:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,188:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:22,196:INFO:Calculating mean and std
2025-06-11 20:31:22,196:INFO:Creating metrics dataframe
2025-06-11 20:31:22,197:INFO:Uploading results into container
2025-06-11 20:31:22,198:INFO:Uploading model into container now
2025-06-11 20:31:22,198:INFO:_master_model_container: 12
2025-06-11 20:31:22,198:INFO:_display_container: 2
2025-06-11 20:31:22,198:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=404, verbose=0, warm_start=False)
2025-06-11 20:31:22,198:INFO:create_model() successfully completed......................................
2025-06-11 20:31:22,271:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:22,271:INFO:Creating metrics dataframe
2025-06-11 20:31:22,273:INFO:Initializing Light Gradient Boosting Machine
2025-06-11 20:31:22,273:INFO:Total runtime is 0.12699737946192424 minutes
2025-06-11 20:31:22,273:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:22,273:INFO:Initializing create_model()
2025-06-11 20:31:22,273:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BFFF72D590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:22,273:INFO:Checking exceptions
2025-06-11 20:31:22,273:INFO:Importing libraries
2025-06-11 20:31:22,273:INFO:Copying training dataset
2025-06-11 20:31:22,274:INFO:Defining folds
2025-06-11 20:31:22,274:INFO:Declaring metric variables
2025-06-11 20:31:22,274:INFO:Importing untrained model
2025-06-11 20:31:22,274:INFO:Light Gradient Boosting Machine Imported successfully
2025-06-11 20:31:22,274:INFO:Starting cross validation
2025-06-11 20:31:22,274:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:23,044:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,046:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,048:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,105:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,107:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,107:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,144:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,145:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,147:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,257:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,259:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,261:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,261:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,263:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,265:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,299:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,305:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,307:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,321:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,322:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,323:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,328:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,330:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,331:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,336:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,338:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,339:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,378:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,379:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,379:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,391:INFO:Calculating mean and std
2025-06-11 20:31:23,391:INFO:Creating metrics dataframe
2025-06-11 20:31:23,392:INFO:Uploading results into container
2025-06-11 20:31:23,393:INFO:Uploading model into container now
2025-06-11 20:31:23,393:INFO:_master_model_container: 13
2025-06-11 20:31:23,393:INFO:_display_container: 2
2025-06-11 20:31:23,393:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=404, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-06-11 20:31:23,393:INFO:create_model() successfully completed......................................
2025-06-11 20:31:23,477:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:23,477:INFO:Creating metrics dataframe
2025-06-11 20:31:23,479:INFO:Initializing Dummy Classifier
2025-06-11 20:31:23,479:INFO:Total runtime is 0.14710037310918173 minutes
2025-06-11 20:31:23,479:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:23,479:INFO:Initializing create_model()
2025-06-11 20:31:23,479:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BFFF72D590>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:23,479:INFO:Checking exceptions
2025-06-11 20:31:23,479:INFO:Importing libraries
2025-06-11 20:31:23,479:INFO:Copying training dataset
2025-06-11 20:31:23,482:INFO:Defining folds
2025-06-11 20:31:23,482:INFO:Declaring metric variables
2025-06-11 20:31:23,482:INFO:Importing untrained model
2025-06-11 20:31:23,482:INFO:Dummy Classifier Imported successfully
2025-06-11 20:31:23,482:INFO:Starting cross validation
2025-06-11 20:31:23,482:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:23,504:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,505:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,506:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,506:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:23,506:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:23,506:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:23,506:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,507:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,507:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,507:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,507:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,507:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:23,507:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,507:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:23,507:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,507:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,507:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,508:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:23,508:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,508:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:23,508:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,508:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,508:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,508:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:23,508:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,508:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:23,508:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,509:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,509:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,509:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2025-06-11 20:31:23,509:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,517:INFO:Calculating mean and std
2025-06-11 20:31:23,517:INFO:Creating metrics dataframe
2025-06-11 20:31:23,519:INFO:Uploading results into container
2025-06-11 20:31:23,519:INFO:Uploading model into container now
2025-06-11 20:31:23,519:INFO:_master_model_container: 14
2025-06-11 20:31:23,519:INFO:_display_container: 2
2025-06-11 20:31:23,520:INFO:DummyClassifier(constant=None, random_state=404, strategy='prior')
2025-06-11 20:31:23,520:INFO:create_model() successfully completed......................................
2025-06-11 20:31:23,595:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:23,595:INFO:Creating metrics dataframe
2025-06-11 20:31:23,597:INFO:Initializing create_model()
2025-06-11 20:31:23,597:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:23,597:INFO:Checking exceptions
2025-06-11 20:31:23,598:INFO:Importing libraries
2025-06-11 20:31:23,598:INFO:Copying training dataset
2025-06-11 20:31:23,599:INFO:Defining folds
2025-06-11 20:31:23,599:INFO:Declaring metric variables
2025-06-11 20:31:23,599:INFO:Importing untrained model
2025-06-11 20:31:23,599:INFO:Declaring custom model
2025-06-11 20:31:23,599:INFO:Decision Tree Classifier Imported successfully
2025-06-11 20:31:23,599:INFO:Cross validation set to False
2025-06-11 20:31:23,599:INFO:Fitting Model
2025-06-11 20:31:23,611:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best')
2025-06-11 20:31:23,611:INFO:create_model() successfully completed......................................
2025-06-11 20:31:23,684:INFO:Creating Dashboard logs
2025-06-11 20:31:23,684:INFO:Model: Decision Tree Classifier
2025-06-11 20:31:23,706:INFO:Logged params: {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'random_state': 404, 'splitter': 'best'}
2025-06-11 20:31:23,793:INFO:Initializing predict_model()
2025-06-11 20:31:23,793:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best'), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001BFFF926700>)
2025-06-11 20:31:23,793:INFO:Checking exceptions
2025-06-11 20:31:23,793:INFO:Preloading libraries
2025-06-11 20:31:23,825:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,826:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,828:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:23,916:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2025-06-11 20:31:24,044:INFO:Creating Dashboard logs
2025-06-11 20:31:24,044:INFO:Model: Random Forest Classifier
2025-06-11 20:31:24,067:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 404, 'verbose': 0, 'warm_start': False}
2025-06-11 20:31:24,262:INFO:Creating Dashboard logs
2025-06-11 20:31:24,262:INFO:Model: Gradient Boosting Classifier
2025-06-11 20:31:24,284:INFO:Logged params: {'ccp_alpha': 0.0, 'criterion': 'friedman_mse', 'init': None, 'learning_rate': 0.1, 'loss': 'log_loss', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_iter_no_change': None, 'random_state': 404, 'subsample': 1.0, 'tol': 0.0001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-06-11 20:31:24,496:INFO:Creating Dashboard logs
2025-06-11 20:31:24,496:INFO:Model: Light Gradient Boosting Machine
2025-06-11 20:31:24,518:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 404, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-06-11 20:31:24,709:INFO:Creating Dashboard logs
2025-06-11 20:31:24,709:INFO:Model: Extra Trees Classifier
2025-06-11 20:31:24,732:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 404, 'verbose': 0, 'warm_start': False}
2025-06-11 20:31:24,939:INFO:Creating Dashboard logs
2025-06-11 20:31:24,939:INFO:Model: Naive Bayes
2025-06-11 20:31:24,963:INFO:Logged params: {'priors': None, 'var_smoothing': 1e-09}
2025-06-11 20:31:25,163:INFO:Creating Dashboard logs
2025-06-11 20:31:25,163:INFO:Model: Linear Discriminant Analysis
2025-06-11 20:31:25,185:INFO:Logged params: {'covariance_estimator': None, 'n_components': None, 'priors': None, 'shrinkage': None, 'solver': 'svd', 'store_covariance': False, 'tol': 0.0001}
2025-06-11 20:31:25,371:INFO:Creating Dashboard logs
2025-06-11 20:31:25,371:INFO:Model: Ridge Classifier
2025-06-11 20:31:25,394:INFO:Logged params: {'alpha': 1.0, 'class_weight': None, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 404, 'solver': 'auto', 'tol': 0.0001}
2025-06-11 20:31:25,612:INFO:Creating Dashboard logs
2025-06-11 20:31:25,612:INFO:Model: K Neighbors Classifier
2025-06-11 20:31:25,633:INFO:Logged params: {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'minkowski', 'metric_params': None, 'n_jobs': -1, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
2025-06-11 20:31:25,821:INFO:Creating Dashboard logs
2025-06-11 20:31:25,821:INFO:Model: Logistic Regression
2025-06-11 20:31:25,842:INFO:Logged params: {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 404, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2025-06-11 20:31:26,037:INFO:Creating Dashboard logs
2025-06-11 20:31:26,037:INFO:Model: Ada Boost Classifier
2025-06-11 20:31:26,059:INFO:Logged params: {'algorithm': 'SAMME.R', 'base_estimator': 'deprecated', 'estimator': None, 'learning_rate': 1.0, 'n_estimators': 50, 'random_state': 404}
2025-06-11 20:31:26,259:INFO:Creating Dashboard logs
2025-06-11 20:31:26,259:INFO:Model: SVM - Linear Kernel
2025-06-11 20:31:26,282:INFO:Logged params: {'alpha': 0.0001, 'average': False, 'class_weight': None, 'early_stopping': False, 'epsilon': 0.1, 'eta0': 0.001, 'fit_intercept': True, 'l1_ratio': 0.15, 'learning_rate': 'optimal', 'loss': 'hinge', 'max_iter': 1000, 'n_iter_no_change': 5, 'n_jobs': -1, 'penalty': 'l2', 'power_t': 0.5, 'random_state': 404, 'shuffle': True, 'tol': 0.001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-06-11 20:31:26,481:INFO:Creating Dashboard logs
2025-06-11 20:31:26,481:INFO:Model: Dummy Classifier
2025-06-11 20:31:26,503:INFO:Logged params: {'constant': None, 'random_state': 404, 'strategy': 'prior'}
2025-06-11 20:31:26,695:INFO:Creating Dashboard logs
2025-06-11 20:31:26,696:INFO:Model: Quadratic Discriminant Analysis
2025-06-11 20:31:26,728:INFO:Logged params: {'priors': None, 'reg_param': 0.0, 'store_covariance': False, 'tol': 0.0001}
2025-06-11 20:31:26,944:INFO:_master_model_container: 14
2025-06-11 20:31:26,944:INFO:_display_container: 2
2025-06-11 20:31:26,944:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best')
2025-06-11 20:31:26,944:INFO:compare_models() successfully completed......................................
2025-06-11 20:31:26,944:INFO:Initializing evaluate_model()
2025-06-11 20:31:26,944:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best'), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-06-11 20:31:26,966:INFO:Initializing plot_model()
2025-06-11 20:31:26,966:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BFFD747410>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best'), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2025-06-11 20:31:26,966:INFO:Checking exceptions
2025-06-11 20:31:26,967:INFO:Preloading libraries
2025-06-11 20:31:26,967:INFO:Copying training dataset
2025-06-11 20:31:26,967:INFO:Plot type: pipeline
2025-06-11 20:31:29,144:INFO:Visual Rendered Successfully
2025-06-11 20:31:29,231:INFO:plot_model() successfully completed......................................
2025-06-11 20:31:29,233:INFO:Initializing save_model()
2025-06-11 20:31:29,233:INFO:save_model(model=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=404, splitter='best'), model_name=credit_risk_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-11 20:31:29,233:INFO:Adding model into prep_pipe
2025-06-11 20:31:29,236:INFO:credit_risk_model.pkl saved in current working directory
2025-06-11 20:31:29,238:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('trained_model',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        random_state=404, splitter='best'))],
         verbose=False)
2025-06-11 20:31:29,238:INFO:save_model() successfully completed......................................
2025-06-11 20:31:34,302:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:34,302:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:34,302:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:34,302:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:34,811:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:31:34,982:INFO:Initializing load_model()
2025-06-11 20:31:34,982:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:31:37,171:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:37,171:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:37,171:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:37,171:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:37,668:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:31:37,838:INFO:Initializing load_model()
2025-06-11 20:31:37,838:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:31:38,366:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:38,367:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:38,367:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:38,367:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:31:38,743:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:31:41,107:INFO:PyCaret ClassificationExperiment
2025-06-11 20:31:41,107:INFO:Logging name: riesgo_credito_multiclase
2025-06-11 20:31:41,107:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-06-11 20:31:41,107:INFO:version 3.2.0
2025-06-11 20:31:41,107:INFO:Initializing setup()
2025-06-11 20:31:41,107:INFO:self.USI: 792b
2025-06-11 20:31:41,107:INFO:self._variable_keys: {'exp_id', 'html_param', 'gpu_n_jobs_param', 'USI', 'seed', 'X', 'gpu_param', 'logging_param', 'pipeline', 'exp_name_log', 'X_test', 'fold_generator', 'y_train', 'fix_imbalance', 'n_jobs_param', 'X_train', '_available_plots', 'log_plots_param', 'is_multiclass', '_ml_usecase', 'y', 'idx', 'fold_shuffle_param', 'data', 'y_test', 'memory', 'fold_groups_param', 'target_param'}
2025-06-11 20:31:41,107:INFO:Checking environment
2025-06-11 20:31:41,107:INFO:python_version: 3.11.0
2025-06-11 20:31:41,107:INFO:python_build: ('main', 'Oct 24 2022 18:26:48')
2025-06-11 20:31:41,107:INFO:machine: AMD64
2025-06-11 20:31:41,121:INFO:platform: Windows-10-10.0.26100-SP0
2025-06-11 20:31:41,128:INFO:Memory: svmem(total=102695145472, available=77576654848, percent=24.5, used=25118490624, free=77576654848)
2025-06-11 20:31:41,128:INFO:Physical Core: 16
2025-06-11 20:31:41,128:INFO:Logical Core: 32
2025-06-11 20:31:41,128:INFO:Checking libraries
2025-06-11 20:31:41,128:INFO:System:
2025-06-11 20:31:41,128:INFO:    python: 3.11.0 (main, Oct 24 2022, 18:26:48) [MSC v.1933 64 bit (AMD64)]
2025-06-11 20:31:41,128:INFO:executable: C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\python.exe
2025-06-11 20:31:41,128:INFO:   machine: Windows-10-10.0.26100-SP0
2025-06-11 20:31:41,128:INFO:PyCaret required dependencies:
2025-06-11 20:31:41,161:INFO:                 pip: 22.3
2025-06-11 20:31:41,161:INFO:          setuptools: 65.5.0
2025-06-11 20:31:41,161:INFO:             pycaret: 3.2.0
2025-06-11 20:31:41,161:INFO:             IPython: 9.1.0
2025-06-11 20:31:41,161:INFO:          ipywidgets: 8.1.7
2025-06-11 20:31:41,161:INFO:                tqdm: 4.67.1
2025-06-11 20:31:41,161:INFO:               numpy: 1.25.2
2025-06-11 20:31:41,161:INFO:              pandas: 1.5.3
2025-06-11 20:31:41,161:INFO:              jinja2: 3.1.6
2025-06-11 20:31:41,161:INFO:               scipy: 1.10.1
2025-06-11 20:31:41,161:INFO:              joblib: 1.3.2
2025-06-11 20:31:41,161:INFO:             sklearn: 1.2.2
2025-06-11 20:31:41,161:INFO:                pyod: 2.0.5
2025-06-11 20:31:41,161:INFO:            imblearn: 0.12.4
2025-06-11 20:31:41,161:INFO:   category_encoders: 2.7.0
2025-06-11 20:31:41,161:INFO:            lightgbm: 4.6.0
2025-06-11 20:31:41,161:INFO:               numba: 0.61.0
2025-06-11 20:31:41,161:INFO:            requests: 2.32.3
2025-06-11 20:31:41,161:INFO:          matplotlib: 3.6.0
2025-06-11 20:31:41,161:INFO:          scikitplot: 0.3.7
2025-06-11 20:31:41,161:INFO:         yellowbrick: 1.5
2025-06-11 20:31:41,161:INFO:              plotly: 5.24.1
2025-06-11 20:31:41,161:INFO:    plotly-resampler: Not installed
2025-06-11 20:31:41,161:INFO:             kaleido: 0.2.1
2025-06-11 20:31:41,161:INFO:           schemdraw: 0.15
2025-06-11 20:31:41,161:INFO:         statsmodels: 0.14.4
2025-06-11 20:31:41,161:INFO:              sktime: 0.21.1
2025-06-11 20:31:41,161:INFO:               tbats: 1.1.3
2025-06-11 20:31:41,161:INFO:            pmdarima: 2.0.4
2025-06-11 20:31:41,161:INFO:              psutil: 7.0.0
2025-06-11 20:31:41,161:INFO:          markupsafe: 3.0.2
2025-06-11 20:31:41,161:INFO:             pickle5: Not installed
2025-06-11 20:31:41,161:INFO:         cloudpickle: 2.2.1
2025-06-11 20:31:41,161:INFO:         deprecation: 2.1.0
2025-06-11 20:31:41,161:INFO:              xxhash: 3.5.0
2025-06-11 20:31:41,161:INFO:           wurlitzer: Not installed
2025-06-11 20:31:41,161:INFO:PyCaret optional dependencies:
2025-06-11 20:31:41,317:INFO:                shap: 0.44.1
2025-06-11 20:31:41,317:INFO:           interpret: 0.6.10
2025-06-11 20:31:41,317:INFO:                umap: 0.5.7
2025-06-11 20:31:41,317:INFO:     ydata_profiling: 4.16.1
2025-06-11 20:31:41,317:INFO:  explainerdashboard: 0.4.8
2025-06-11 20:31:41,317:INFO:             autoviz: Not installed
2025-06-11 20:31:41,317:INFO:           fairlearn: 0.7.0
2025-06-11 20:31:41,317:INFO:          deepchecks: Not installed
2025-06-11 20:31:41,317:INFO:             xgboost: Not installed
2025-06-11 20:31:41,317:INFO:            catboost: Not installed
2025-06-11 20:31:41,317:INFO:              kmodes: Not installed
2025-06-11 20:31:41,317:INFO:             mlxtend: Not installed
2025-06-11 20:31:41,317:INFO:       statsforecast: Not installed
2025-06-11 20:31:41,318:INFO:        tune_sklearn: Not installed
2025-06-11 20:31:41,318:INFO:                 ray: Not installed
2025-06-11 20:31:41,318:INFO:            hyperopt: Not installed
2025-06-11 20:31:41,318:INFO:              optuna: Not installed
2025-06-11 20:31:41,318:INFO:               skopt: Not installed
2025-06-11 20:31:41,318:INFO:              mlflow: 2.22.0
2025-06-11 20:31:41,318:INFO:              gradio: Not installed
2025-06-11 20:31:41,318:INFO:             fastapi: 0.115.12
2025-06-11 20:31:41,318:INFO:             uvicorn: 0.34.2
2025-06-11 20:31:41,318:INFO:              m2cgen: Not installed
2025-06-11 20:31:41,318:INFO:           evidently: Not installed
2025-06-11 20:31:41,318:INFO:               fugue: Not installed
2025-06-11 20:31:41,318:INFO:           streamlit: 1.45.1
2025-06-11 20:31:41,318:INFO:             prophet: Not installed
2025-06-11 20:31:41,318:INFO:None
2025-06-11 20:31:41,318:INFO:Set up data.
2025-06-11 20:31:41,320:INFO:Set up folding strategy.
2025-06-11 20:31:41,320:INFO:Set up train/test split.
2025-06-11 20:31:41,322:INFO:Set up index.
2025-06-11 20:31:41,322:INFO:Assigning column types.
2025-06-11 20:31:41,323:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-06-11 20:31:41,342:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-11 20:31:41,343:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 20:31:41,357:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,357:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,376:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-11 20:31:41,376:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 20:31:41,388:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,388:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,388:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-06-11 20:31:41,407:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 20:31:41,417:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,417:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,437:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 20:31:41,448:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,449:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,449:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-06-11 20:31:41,478:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,479:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,509:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,510:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,511:INFO:Preparing preprocessing pipeline...
2025-06-11 20:31:41,511:INFO:Set up label encoding.
2025-06-11 20:31:41,511:INFO:Set up simple imputation.
2025-06-11 20:31:41,511:INFO:Set up encoding of categorical features.
2025-06-11 20:31:41,530:INFO:Finished creating preprocessing pipeline.
2025-06-11 20:31:41,532:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-06-11 20:31:41,532:INFO:Creating final display dataframe.
2025-06-11 20:31:41,585:INFO:Setup _display_container:                     Description                       Value
0                    Session id                         404
1                        Target                  risk_level
2                   Target type                  Multiclass
3                Target mapping  alto: 0, bajo: 1, medio: 2
4           Original data shape                   (1000, 8)
5        Transformed data shape                  (1000, 12)
6   Transformed train set shape                   (700, 12)
7    Transformed test set shape                   (300, 12)
8              Numeric features                           6
9          Categorical features                           1
10                   Preprocess                        True
11              Imputation type                      simple
12           Numeric imputation                        mean
13       Categorical imputation                        mode
14     Maximum one-hot encoding                          25
15              Encoding method                        None
16               Fold Generator             StratifiedKFold
17                  Fold Number                          10
18                     CPU Jobs                          -1
19                      Use GPU                       False
20               Log Experiment                MlflowLogger
21              Experiment Name   riesgo_credito_multiclase
22                          USI                        792b
2025-06-11 20:31:41,618:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,619:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,649:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,649:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:31:41,651:INFO:Logging experiment in loggers
2025-06-11 20:31:41,790:INFO:SubProcess save_model() called ==================================
2025-06-11 20:31:41,793:INFO:Initializing save_model()
2025-06-11 20:31:41,793:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), model_name=C:\Users\BRANGO~1\AppData\Local\Temp\tmp6cepb77n\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-11 20:31:41,793:INFO:Adding model into prep_pipe
2025-06-11 20:31:41,793:WARNING:Only Model saved as it was a pipeline.
2025-06-11 20:31:41,794:INFO:C:\Users\BRANGO~1\AppData\Local\Temp\tmp6cepb77n\Transformation Pipeline.pkl saved in current working directory
2025-06-11 20:31:41,798:INFO:Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-06-11 20:31:41,798:INFO:save_model() successfully completed......................................
2025-06-11 20:31:41,868:INFO:SubProcess save_model() end ==================================
2025-06-11 20:31:41,899:INFO:setup() successfully completed in 0.55s...............
2025-06-11 20:31:41,899:INFO:Initializing compare_models()
2025-06-11 20:31:41,899:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001731488E9D0>, include=['rf', 'lightgbm', 'et', 'gbc'], exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001731488E9D0>, 'include': ['rf', 'lightgbm', 'et', 'gbc'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-06-11 20:31:41,899:INFO:Checking exceptions
2025-06-11 20:31:41,901:INFO:Preparing display monitor
2025-06-11 20:31:41,902:INFO:Initializing Random Forest Classifier
2025-06-11 20:31:41,902:INFO:Total runtime is 0.0 minutes
2025-06-11 20:31:41,902:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:41,902:INFO:Initializing create_model()
2025-06-11 20:31:41,902:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001731488E9D0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017316C0DA50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:41,902:INFO:Checking exceptions
2025-06-11 20:31:41,902:INFO:Importing libraries
2025-06-11 20:31:41,902:INFO:Copying training dataset
2025-06-11 20:31:41,903:INFO:Defining folds
2025-06-11 20:31:41,903:INFO:Declaring metric variables
2025-06-11 20:31:41,903:INFO:Importing untrained model
2025-06-11 20:31:41,903:INFO:Random Forest Classifier Imported successfully
2025-06-11 20:31:41,903:INFO:Starting cross validation
2025-06-11 20:31:41,904:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:43,742:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,743:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,743:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,744:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,744:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,745:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,752:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,753:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,753:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,754:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,754:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,756:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,773:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,774:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,776:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,779:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,781:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,782:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,789:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,789:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,790:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,790:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,791:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,791:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,792:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,792:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,793:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,798:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,798:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,799:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:43,809:INFO:Calculating mean and std
2025-06-11 20:31:43,809:INFO:Creating metrics dataframe
2025-06-11 20:31:43,812:INFO:Uploading results into container
2025-06-11 20:31:43,812:INFO:Uploading model into container now
2025-06-11 20:31:43,812:INFO:_master_model_container: 1
2025-06-11 20:31:43,812:INFO:_display_container: 2
2025-06-11 20:31:43,812:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=404, verbose=0, warm_start=False)
2025-06-11 20:31:43,812:INFO:create_model() successfully completed......................................
2025-06-11 20:31:43,890:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:43,890:INFO:Creating metrics dataframe
2025-06-11 20:31:43,892:INFO:Initializing Light Gradient Boosting Machine
2025-06-11 20:31:43,892:INFO:Total runtime is 0.03316773176193237 minutes
2025-06-11 20:31:43,892:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:43,892:INFO:Initializing create_model()
2025-06-11 20:31:43,892:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001731488E9D0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017316C0DA50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:43,892:INFO:Checking exceptions
2025-06-11 20:31:43,892:INFO:Importing libraries
2025-06-11 20:31:43,892:INFO:Copying training dataset
2025-06-11 20:31:43,893:INFO:Defining folds
2025-06-11 20:31:43,893:INFO:Declaring metric variables
2025-06-11 20:31:43,893:INFO:Importing untrained model
2025-06-11 20:31:43,893:INFO:Light Gradient Boosting Machine Imported successfully
2025-06-11 20:31:43,893:INFO:Starting cross validation
2025-06-11 20:31:43,894:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:46,099:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,102:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,104:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,191:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,193:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,194:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,250:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,252:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,253:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,394:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,395:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,397:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,434:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,437:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,439:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,454:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,456:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,457:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,462:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,463:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,464:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,603:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,605:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,606:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,611:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,612:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,619:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,649:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,651:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,652:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:46,656:INFO:Calculating mean and std
2025-06-11 20:31:46,656:INFO:Creating metrics dataframe
2025-06-11 20:31:46,658:INFO:Uploading results into container
2025-06-11 20:31:46,659:INFO:Uploading model into container now
2025-06-11 20:31:46,659:INFO:_master_model_container: 2
2025-06-11 20:31:46,659:INFO:_display_container: 2
2025-06-11 20:31:46,659:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=404, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-06-11 20:31:46,659:INFO:create_model() successfully completed......................................
2025-06-11 20:31:46,738:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:46,738:INFO:Creating metrics dataframe
2025-06-11 20:31:46,741:INFO:Initializing Extra Trees Classifier
2025-06-11 20:31:46,741:INFO:Total runtime is 0.08064503272374471 minutes
2025-06-11 20:31:46,742:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:46,742:INFO:Initializing create_model()
2025-06-11 20:31:46,742:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001731488E9D0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017316C0DA50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:46,742:INFO:Checking exceptions
2025-06-11 20:31:46,742:INFO:Importing libraries
2025-06-11 20:31:46,742:INFO:Copying training dataset
2025-06-11 20:31:46,744:INFO:Defining folds
2025-06-11 20:31:46,744:INFO:Declaring metric variables
2025-06-11 20:31:46,744:INFO:Importing untrained model
2025-06-11 20:31:46,744:INFO:Extra Trees Classifier Imported successfully
2025-06-11 20:31:46,744:INFO:Starting cross validation
2025-06-11 20:31:46,744:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:48,310:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,311:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,312:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,313:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,313:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,314:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,314:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,316:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,316:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,316:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,316:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,317:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,317:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,321:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,322:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,323:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,323:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,323:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,324:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,324:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,325:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,327:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,328:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,329:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,330:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,331:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,333:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,343:INFO:Calculating mean and std
2025-06-11 20:31:48,344:INFO:Creating metrics dataframe
2025-06-11 20:31:48,345:INFO:Uploading results into container
2025-06-11 20:31:48,346:INFO:Uploading model into container now
2025-06-11 20:31:48,346:INFO:_master_model_container: 3
2025-06-11 20:31:48,346:INFO:_display_container: 2
2025-06-11 20:31:48,346:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=404, verbose=0, warm_start=False)
2025-06-11 20:31:48,346:INFO:create_model() successfully completed......................................
2025-06-11 20:31:48,441:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:48,441:INFO:Creating metrics dataframe
2025-06-11 20:31:48,443:INFO:Initializing Gradient Boosting Classifier
2025-06-11 20:31:48,443:INFO:Total runtime is 0.10901390314102173 minutes
2025-06-11 20:31:48,443:INFO:SubProcess create_model() called ==================================
2025-06-11 20:31:48,443:INFO:Initializing create_model()
2025-06-11 20:31:48,443:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001731488E9D0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000017316C0DA50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:48,443:INFO:Checking exceptions
2025-06-11 20:31:48,443:INFO:Importing libraries
2025-06-11 20:31:48,443:INFO:Copying training dataset
2025-06-11 20:31:48,444:INFO:Defining folds
2025-06-11 20:31:48,444:INFO:Declaring metric variables
2025-06-11 20:31:48,444:INFO:Importing untrained model
2025-06-11 20:31:48,444:INFO:Gradient Boosting Classifier Imported successfully
2025-06-11 20:31:48,444:INFO:Starting cross validation
2025-06-11 20:31:48,445:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:31:48,707:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,708:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,709:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,713:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,714:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,714:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,714:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,714:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,714:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,715:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,715:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,716:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,716:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,716:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,716:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,718:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,718:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,718:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,718:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,719:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,720:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,721:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:48,721:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:49,820:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:49,821:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:49,821:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:49,821:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:49,822:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:49,822:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:49,826:INFO:Calculating mean and std
2025-06-11 20:31:49,826:INFO:Creating metrics dataframe
2025-06-11 20:31:49,828:INFO:Uploading results into container
2025-06-11 20:31:49,828:INFO:Uploading model into container now
2025-06-11 20:31:49,828:INFO:_master_model_container: 4
2025-06-11 20:31:49,828:INFO:_display_container: 2
2025-06-11 20:31:49,828:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=404, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-06-11 20:31:49,828:INFO:create_model() successfully completed......................................
2025-06-11 20:31:49,911:INFO:SubProcess create_model() end ==================================
2025-06-11 20:31:49,911:INFO:Creating metrics dataframe
2025-06-11 20:31:49,914:INFO:Initializing create_model()
2025-06-11 20:31:49,914:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001731488E9D0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=404, verbose=0, warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:31:49,914:INFO:Checking exceptions
2025-06-11 20:31:49,914:INFO:Importing libraries
2025-06-11 20:31:49,914:INFO:Copying training dataset
2025-06-11 20:31:49,914:INFO:Defining folds
2025-06-11 20:31:49,914:INFO:Declaring metric variables
2025-06-11 20:31:49,916:INFO:Importing untrained model
2025-06-11 20:31:49,916:INFO:Declaring custom model
2025-06-11 20:31:49,916:INFO:Random Forest Classifier Imported successfully
2025-06-11 20:31:49,916:INFO:Cross validation set to False
2025-06-11 20:31:49,916:INFO:Fitting Model
2025-06-11 20:31:50,004:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=404, verbose=0, warm_start=False)
2025-06-11 20:31:50,004:INFO:create_model() successfully completed......................................
2025-06-11 20:31:50,082:INFO:Creating Dashboard logs
2025-06-11 20:31:50,083:INFO:Model: Random Forest Classifier
2025-06-11 20:31:50,106:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 404, 'verbose': 0, 'warm_start': False}
2025-06-11 20:31:50,195:INFO:Initializing predict_model()
2025-06-11 20:31:50,195:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001731488E9D0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=404, verbose=0, warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000017316E12DE0>)
2025-06-11 20:31:50,195:INFO:Checking exceptions
2025-06-11 20:31:50,195:INFO:Preloading libraries
2025-06-11 20:31:50,264:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:50,266:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:50,267:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:31:50,361:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2025-06-11 20:31:50,501:INFO:Creating Dashboard logs
2025-06-11 20:31:50,501:INFO:Model: Gradient Boosting Classifier
2025-06-11 20:31:50,524:INFO:Logged params: {'ccp_alpha': 0.0, 'criterion': 'friedman_mse', 'init': None, 'learning_rate': 0.1, 'loss': 'log_loss', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_iter_no_change': None, 'random_state': 404, 'subsample': 1.0, 'tol': 0.0001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-06-11 20:31:50,728:INFO:Creating Dashboard logs
2025-06-11 20:31:50,728:INFO:Model: Light Gradient Boosting Machine
2025-06-11 20:31:50,751:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 404, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-06-11 20:31:50,954:INFO:Creating Dashboard logs
2025-06-11 20:31:50,954:INFO:Model: Extra Trees Classifier
2025-06-11 20:31:50,976:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 404, 'verbose': 0, 'warm_start': False}
2025-06-11 20:31:51,169:INFO:_master_model_container: 4
2025-06-11 20:31:51,169:INFO:_display_container: 2
2025-06-11 20:31:51,170:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=404, verbose=0, warm_start=False)
2025-06-11 20:31:51,170:INFO:compare_models() successfully completed......................................
2025-06-11 20:31:51,170:INFO:Initializing evaluate_model()
2025-06-11 20:31:51,170:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001731488E9D0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=404, verbose=0, warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-06-11 20:31:51,191:INFO:Initializing plot_model()
2025-06-11 20:31:51,191:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001731488E9D0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=404, verbose=0, warm_start=False), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2025-06-11 20:31:51,191:INFO:Checking exceptions
2025-06-11 20:31:51,209:INFO:Preloading libraries
2025-06-11 20:31:51,213:INFO:Copying training dataset
2025-06-11 20:31:51,213:INFO:Plot type: pipeline
2025-06-11 20:31:58,974:INFO:Visual Rendered Successfully
2025-06-11 20:31:59,059:INFO:plot_model() successfully completed......................................
2025-06-11 20:31:59,063:INFO:Initializing save_model()
2025-06-11 20:31:59,063:INFO:save_model(model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=404, verbose=0, warm_start=False), model_name=credit_risk_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-11 20:31:59,063:INFO:Adding model into prep_pipe
2025-06-11 20:31:59,074:INFO:credit_risk_model.pkl saved in current working directory
2025-06-11 20:31:59,076:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        n_estimators=100, n_jobs=-1,
                                        oob_score=False, random_state=404,
                                        verbose=0, warm_start=False))],
         verbose=False)
2025-06-11 20:31:59,076:INFO:save_model() successfully completed......................................
2025-06-11 20:33:17,168:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:33:17,168:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:33:17,169:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:33:17,169:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:33:17,667:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:33:17,845:INFO:Initializing load_model()
2025-06-11 20:33:17,845:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:34:08,572:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:34:08,572:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:34:08,572:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:34:08,572:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:34:09,088:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:34:09,267:INFO:Initializing load_model()
2025-06-11 20:34:09,267:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:34:22,999:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:34:22,999:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:34:22,999:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:34:22,999:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:34:23,469:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:34:23,635:INFO:Initializing load_model()
2025-06-11 20:34:23,635:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:34:45,261:INFO:Initializing predict_model()
2025-06-11 20:34:45,261:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C7456A9550>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('trained_model',
                 RandomForestClassifier(n_jobs=-1, random_state=404))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C746C41760>)
2025-06-11 20:34:45,261:INFO:Checking exceptions
2025-06-11 20:34:45,261:INFO:Preloading libraries
2025-06-11 20:34:45,262:INFO:Set up data.
2025-06-11 20:34:45,264:INFO:Set up index.
2025-06-11 20:39:44,268:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:39:44,268:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:39:44,268:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:39:44,269:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:39:44,729:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:39:44,898:INFO:Initializing load_model()
2025-06-11 20:39:44,899:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:39:46,612:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:39:46,612:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:39:46,613:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:39:46,613:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:39:47,053:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:39:47,218:INFO:Initializing load_model()
2025-06-11 20:39:47,219:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:40:02,102:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:02,102:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:02,103:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:02,103:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:02,568:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:40:02,741:INFO:Initializing load_model()
2025-06-11 20:40:02,741:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:40:04,527:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:04,527:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:04,527:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:04,527:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:05,027:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:40:05,198:INFO:Initializing load_model()
2025-06-11 20:40:05,198:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:40:09,501:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:09,501:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:09,501:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:09,501:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:09,983:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:40:10,153:INFO:Initializing load_model()
2025-06-11 20:40:10,153:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:40:10,797:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:10,797:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:10,797:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:10,797:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:11,180:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:40:13,524:INFO:PyCaret ClassificationExperiment
2025-06-11 20:40:13,524:INFO:Logging name: riesgo_credito_multiclase
2025-06-11 20:40:13,524:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-06-11 20:40:13,524:INFO:version 3.2.0
2025-06-11 20:40:13,524:INFO:Initializing setup()
2025-06-11 20:40:13,524:INFO:self.USI: c34a
2025-06-11 20:40:13,524:INFO:self._variable_keys: {'fix_imbalance', 'idx', 'memory', 'n_jobs_param', 'gpu_n_jobs_param', 'USI', 'html_param', 'fold_groups_param', 'X_test', 'seed', 'exp_name_log', 'fold_generator', 'y', 'target_param', 'X', 'gpu_param', 'X_train', '_ml_usecase', 'logging_param', 'log_plots_param', '_available_plots', 'is_multiclass', 'fold_shuffle_param', 'exp_id', 'data', 'y_train', 'pipeline', 'y_test'}
2025-06-11 20:40:13,524:INFO:Checking environment
2025-06-11 20:40:13,524:INFO:python_version: 3.11.0
2025-06-11 20:40:13,524:INFO:python_build: ('main', 'Oct 24 2022 18:26:48')
2025-06-11 20:40:13,524:INFO:machine: AMD64
2025-06-11 20:40:13,537:INFO:platform: Windows-10-10.0.26100-SP0
2025-06-11 20:40:13,544:INFO:Memory: svmem(total=102695145472, available=77395423232, percent=24.6, used=25299722240, free=77395423232)
2025-06-11 20:40:13,544:INFO:Physical Core: 16
2025-06-11 20:40:13,544:INFO:Logical Core: 32
2025-06-11 20:40:13,544:INFO:Checking libraries
2025-06-11 20:40:13,544:INFO:System:
2025-06-11 20:40:13,544:INFO:    python: 3.11.0 (main, Oct 24 2022, 18:26:48) [MSC v.1933 64 bit (AMD64)]
2025-06-11 20:40:13,544:INFO:executable: C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\python.exe
2025-06-11 20:40:13,544:INFO:   machine: Windows-10-10.0.26100-SP0
2025-06-11 20:40:13,544:INFO:PyCaret required dependencies:
2025-06-11 20:40:13,577:INFO:                 pip: 22.3
2025-06-11 20:40:13,577:INFO:          setuptools: 65.5.0
2025-06-11 20:40:13,577:INFO:             pycaret: 3.2.0
2025-06-11 20:40:13,577:INFO:             IPython: 9.1.0
2025-06-11 20:40:13,577:INFO:          ipywidgets: 8.1.7
2025-06-11 20:40:13,577:INFO:                tqdm: 4.67.1
2025-06-11 20:40:13,577:INFO:               numpy: 1.25.2
2025-06-11 20:40:13,577:INFO:              pandas: 1.5.3
2025-06-11 20:40:13,577:INFO:              jinja2: 3.1.6
2025-06-11 20:40:13,577:INFO:               scipy: 1.10.1
2025-06-11 20:40:13,577:INFO:              joblib: 1.3.2
2025-06-11 20:40:13,577:INFO:             sklearn: 1.2.2
2025-06-11 20:40:13,577:INFO:                pyod: 2.0.5
2025-06-11 20:40:13,577:INFO:            imblearn: 0.12.4
2025-06-11 20:40:13,577:INFO:   category_encoders: 2.7.0
2025-06-11 20:40:13,577:INFO:            lightgbm: 4.6.0
2025-06-11 20:40:13,577:INFO:               numba: 0.61.0
2025-06-11 20:40:13,577:INFO:            requests: 2.32.3
2025-06-11 20:40:13,577:INFO:          matplotlib: 3.6.0
2025-06-11 20:40:13,577:INFO:          scikitplot: 0.3.7
2025-06-11 20:40:13,577:INFO:         yellowbrick: 1.5
2025-06-11 20:40:13,577:INFO:              plotly: 5.24.1
2025-06-11 20:40:13,577:INFO:    plotly-resampler: Not installed
2025-06-11 20:40:13,577:INFO:             kaleido: 0.2.1
2025-06-11 20:40:13,578:INFO:           schemdraw: 0.15
2025-06-11 20:40:13,578:INFO:         statsmodels: 0.14.4
2025-06-11 20:40:13,578:INFO:              sktime: 0.21.1
2025-06-11 20:40:13,578:INFO:               tbats: 1.1.3
2025-06-11 20:40:13,578:INFO:            pmdarima: 2.0.4
2025-06-11 20:40:13,578:INFO:              psutil: 7.0.0
2025-06-11 20:40:13,578:INFO:          markupsafe: 3.0.2
2025-06-11 20:40:13,578:INFO:             pickle5: Not installed
2025-06-11 20:40:13,578:INFO:         cloudpickle: 2.2.1
2025-06-11 20:40:13,578:INFO:         deprecation: 2.1.0
2025-06-11 20:40:13,578:INFO:              xxhash: 3.5.0
2025-06-11 20:40:13,578:INFO:           wurlitzer: Not installed
2025-06-11 20:40:13,578:INFO:PyCaret optional dependencies:
2025-06-11 20:40:13,724:INFO:                shap: 0.44.1
2025-06-11 20:40:13,724:INFO:           interpret: 0.6.10
2025-06-11 20:40:13,724:INFO:                umap: 0.5.7
2025-06-11 20:40:13,724:INFO:     ydata_profiling: 4.16.1
2025-06-11 20:40:13,724:INFO:  explainerdashboard: 0.4.8
2025-06-11 20:40:13,724:INFO:             autoviz: Not installed
2025-06-11 20:40:13,724:INFO:           fairlearn: 0.7.0
2025-06-11 20:40:13,724:INFO:          deepchecks: Not installed
2025-06-11 20:40:13,724:INFO:             xgboost: Not installed
2025-06-11 20:40:13,724:INFO:            catboost: Not installed
2025-06-11 20:40:13,724:INFO:              kmodes: Not installed
2025-06-11 20:40:13,724:INFO:             mlxtend: Not installed
2025-06-11 20:40:13,724:INFO:       statsforecast: Not installed
2025-06-11 20:40:13,724:INFO:        tune_sklearn: Not installed
2025-06-11 20:40:13,724:INFO:                 ray: Not installed
2025-06-11 20:40:13,724:INFO:            hyperopt: Not installed
2025-06-11 20:40:13,724:INFO:              optuna: Not installed
2025-06-11 20:40:13,724:INFO:               skopt: Not installed
2025-06-11 20:40:13,724:INFO:              mlflow: 2.22.0
2025-06-11 20:40:13,724:INFO:              gradio: Not installed
2025-06-11 20:40:13,724:INFO:             fastapi: 0.115.12
2025-06-11 20:40:13,724:INFO:             uvicorn: 0.34.2
2025-06-11 20:40:13,724:INFO:              m2cgen: Not installed
2025-06-11 20:40:13,724:INFO:           evidently: Not installed
2025-06-11 20:40:13,724:INFO:               fugue: Not installed
2025-06-11 20:40:13,724:INFO:           streamlit: 1.45.1
2025-06-11 20:40:13,724:INFO:             prophet: Not installed
2025-06-11 20:40:13,724:INFO:None
2025-06-11 20:40:13,724:INFO:Set up data.
2025-06-11 20:40:13,726:INFO:Set up folding strategy.
2025-06-11 20:40:13,726:INFO:Set up train/test split.
2025-06-11 20:40:13,728:INFO:Set up index.
2025-06-11 20:40:13,728:INFO:Assigning column types.
2025-06-11 20:40:13,730:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-06-11 20:40:13,748:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-11 20:40:13,748:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 20:40:13,762:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:13,762:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:13,781:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-06-11 20:40:13,781:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 20:40:13,792:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:13,792:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:13,793:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-06-11 20:40:13,810:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 20:40:13,823:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:13,823:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:13,841:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-06-11 20:40:13,853:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:13,853:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:13,853:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-06-11 20:40:13,883:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:13,883:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:13,914:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:13,915:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:13,916:INFO:Preparing preprocessing pipeline...
2025-06-11 20:40:13,916:INFO:Set up label encoding.
2025-06-11 20:40:13,916:INFO:Set up simple imputation.
2025-06-11 20:40:13,917:INFO:Set up encoding of categorical features.
2025-06-11 20:40:13,935:INFO:Finished creating preprocessing pipeline.
2025-06-11 20:40:13,938:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-06-11 20:40:13,938:INFO:Creating final display dataframe.
2025-06-11 20:40:13,992:INFO:Setup _display_container:                     Description                       Value
0                    Session id                         404
1                        Target                  risk_level
2                   Target type                  Multiclass
3                Target mapping  alto: 0, bajo: 1, medio: 2
4           Original data shape                   (1000, 8)
5        Transformed data shape                  (1000, 12)
6   Transformed train set shape                   (700, 12)
7    Transformed test set shape                   (300, 12)
8              Numeric features                           6
9          Categorical features                           1
10                   Preprocess                        True
11              Imputation type                      simple
12           Numeric imputation                        mean
13       Categorical imputation                        mode
14     Maximum one-hot encoding                          25
15              Encoding method                        None
16               Fold Generator             StratifiedKFold
17                  Fold Number                          10
18                     CPU Jobs                          -1
19                      Use GPU                       False
20               Log Experiment                MlflowLogger
21              Experiment Name   riesgo_credito_multiclase
22                          USI                        c34a
2025-06-11 20:40:14,025:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:14,025:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:14,056:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:14,056:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-06-11 20:40:14,056:INFO:Logging experiment in loggers
2025-06-11 20:40:14,205:INFO:SubProcess save_model() called ==================================
2025-06-11 20:40:14,208:INFO:Initializing save_model()
2025-06-11 20:40:14,208:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), model_name=C:\Users\BRANGO~1\AppData\Local\Temp\tmp3a2iwj1f\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-11 20:40:14,208:INFO:Adding model into prep_pipe
2025-06-11 20:40:14,208:WARNING:Only Model saved as it was a pipeline.
2025-06-11 20:40:14,210:INFO:C:\Users\BRANGO~1\AppData\Local\Temp\tmp3a2iwj1f\Transformation Pipeline.pkl saved in current working directory
2025-06-11 20:40:14,212:INFO:Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-06-11 20:40:14,212:INFO:save_model() successfully completed......................................
2025-06-11 20:40:14,289:INFO:SubProcess save_model() end ==================================
2025-06-11 20:40:14,323:INFO:setup() successfully completed in 0.53s...............
2025-06-11 20:40:14,323:INFO:Initializing create_model()
2025-06-11 20:40:14,323:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C5CF77E550>, estimator=lightgbm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-06-11 20:40:14,323:INFO:Checking exceptions
2025-06-11 20:40:14,324:INFO:Importing libraries
2025-06-11 20:40:14,324:INFO:Copying training dataset
2025-06-11 20:40:14,326:INFO:Defining folds
2025-06-11 20:40:14,326:INFO:Declaring metric variables
2025-06-11 20:40:14,326:INFO:Importing untrained model
2025-06-11 20:40:14,326:INFO:Light Gradient Boosting Machine Imported successfully
2025-06-11 20:40:14,326:INFO:Starting cross validation
2025-06-11 20:40:14,327:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-06-11 20:40:15,855:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:15,855:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:15,855:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:15,855:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:16,641:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:40:16,988:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:16,990:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:16,992:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,043:INFO:Initializing load_model()
2025-06-11 20:40:17,043:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:40:17,116:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,118:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,119:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,280:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,283:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,285:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,325:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,326:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,328:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,329:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,330:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,331:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,339:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,341:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,342:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,342:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,343:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,343:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,360:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,362:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,363:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,482:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,483:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,485:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,511:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,512:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,513:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,526:INFO:Calculating mean and std
2025-06-11 20:40:17,527:INFO:Creating metrics dataframe
2025-06-11 20:40:17,528:INFO:Finalizing model
2025-06-11 20:40:17,552:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000140 seconds.
2025-06-11 20:40:17,552:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-06-11 20:40:17,552:INFO:[LightGBM] [Info] Total Bins 552
2025-06-11 20:40:17,553:INFO:[LightGBM] [Info] Number of data points in the train set: 700, number of used features: 11
2025-06-11 20:40:17,553:INFO:[LightGBM] [Info] Start training from score -2.247015
2025-06-11 20:40:17,553:INFO:[LightGBM] [Info] Start training from score -0.441833
2025-06-11 20:40:17,553:INFO:[LightGBM] [Info] Start training from score -1.380596
2025-06-11 20:40:17,553:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,553:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,554:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,554:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,555:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,556:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,557:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,557:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,558:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,558:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,560:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,561:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,561:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,562:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,563:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,564:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,565:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,565:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,566:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,567:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,568:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,568:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,570:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,571:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,572:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,572:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,573:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,574:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,574:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,575:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,576:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,576:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,577:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,578:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,580:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,581:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,582:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,583:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,583:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,584:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,585:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,585:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,586:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,587:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,588:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,588:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,589:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,590:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,591:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,591:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,592:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,593:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,593:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,593:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,595:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,595:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,596:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,597:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,598:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,599:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,600:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,601:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,601:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,602:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,603:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,604:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,605:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,606:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,607:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,608:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,608:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,609:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,610:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,611:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,612:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,613:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,614:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,614:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,615:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,616:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,616:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,617:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,617:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,618:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,618:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,618:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,619:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,620:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,621:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,622:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,623:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,623:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,624:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,624:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,625:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,626:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,628:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,630:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,631:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,632:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,633:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,634:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,635:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,637:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,638:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,638:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,638:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,639:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,640:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,642:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,643:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,644:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,646:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,647:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,648:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,650:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,651:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,653:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,655:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,657:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,659:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,661:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,662:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,663:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,664:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,666:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,667:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,668:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,670:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,671:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,674:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,676:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,678:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,680:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,681:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,682:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,682:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,683:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,684:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,685:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,686:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,687:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,689:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,690:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,691:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,691:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,692:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,692:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,692:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,693:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,693:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,693:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,694:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,694:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,694:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,695:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,695:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,695:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,696:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,696:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,696:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,696:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,697:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,697:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,697:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,697:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,698:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,698:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,698:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,698:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,699:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,700:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,700:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,700:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,700:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,700:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,701:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,701:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,701:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,701:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,701:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,701:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,702:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,703:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,703:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,703:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,704:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,704:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,704:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,704:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,704:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,705:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,705:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,705:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,705:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,706:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,706:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,706:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,706:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,706:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,706:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,707:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,708:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-06-11 20:40:17,720:INFO:Creating Dashboard logs
2025-06-11 20:40:17,720:INFO:Model: Light Gradient Boosting Machine
2025-06-11 20:40:17,755:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 404, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-06-11 20:40:17,857:INFO:Initializing predict_model()
2025-06-11 20:40:17,857:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C5CF77E550>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=404, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C5D1584720>)
2025-06-11 20:40:17,857:INFO:Checking exceptions
2025-06-11 20:40:17,857:INFO:Preloading libraries
2025-06-11 20:40:17,894:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,896:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,897:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'medio') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-06-11 20:40:17,992:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\_distutils_hack\__init__.py:33: UserWarning: Setuptools is replacing distutils.
  warnings.warn("Setuptools is replacing distutils.")

2025-06-11 20:40:18,144:INFO:Uploading results into container
2025-06-11 20:40:18,144:INFO:Uploading model into container now
2025-06-11 20:40:18,148:INFO:_master_model_container: 1
2025-06-11 20:40:18,148:INFO:_display_container: 2
2025-06-11 20:40:18,148:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=404, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-06-11 20:40:18,148:INFO:create_model() successfully completed......................................
2025-06-11 20:40:18,227:INFO:Initializing evaluate_model()
2025-06-11 20:40:18,227:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C5CF77E550>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=404, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-06-11 20:40:18,247:INFO:Initializing plot_model()
2025-06-11 20:40:18,247:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C5CF77E550>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=404, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), plot=pipeline, scale=1, save=False, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), fit_kwargs={}, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=False, system=True, display=None, display_format=None)
2025-06-11 20:40:18,247:INFO:Checking exceptions
2025-06-11 20:40:18,248:INFO:Preloading libraries
2025-06-11 20:40:18,259:INFO:Copying training dataset
2025-06-11 20:40:18,259:INFO:Plot type: pipeline
2025-06-11 20:40:20,359:INFO:Visual Rendered Successfully
2025-06-11 20:40:20,443:INFO:plot_model() successfully completed......................................
2025-06-11 20:40:20,445:INFO:Initializing save_model()
2025-06-11 20:40:20,445:INFO:save_model(model=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=404, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), model_name=credit_risk_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\BRANGO~1\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=Sim...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None, include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-06-11 20:40:20,445:INFO:Adding model into prep_pipe
2025-06-11 20:40:20,456:INFO:credit_risk_model.pkl saved in current working directory
2025-06-11 20:40:20,460:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fi...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=404,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-06-11 20:40:20,460:INFO:save_model() successfully completed......................................
2025-06-11 20:40:39,955:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:39,955:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:39,955:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:39,955:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-06-11 20:40:40,394:WARNING:C:\Users\Brangovich\AppData\Local\Programs\Python\Python311\Lib\site-packages\mlflow\protos\service_pb2.py:11: UserWarning: google.protobuf.service module is deprecated. RPC implementations should provide code generator plugins which generate code specific to the RPC implementation. service.py will be removed in Jan 2025
  from google.protobuf import service as _service

2025-06-11 20:40:40,555:INFO:Initializing load_model()
2025-06-11 20:40:40,555:INFO:load_model(model_name=credit_risk_model, platform=None, authentication=None, verbose=True)
2025-06-11 20:41:10,613:INFO:Initializing predict_model()
2025-06-11 20:41:10,613:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001CB1F4E75D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['age', 'income', 'loan_amount',
                                             'term_months', 'num_loans_last_5y',
                                             'current_arrears'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('trained_model', LGBMClassifier(n_jobs=-1, random_state=404))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CB20ADE020>)
2025-06-11 20:41:10,613:INFO:Checking exceptions
2025-06-11 20:41:10,613:INFO:Preloading libraries
2025-06-11 20:41:10,613:INFO:Set up data.
2025-06-11 20:41:10,616:INFO:Set up index.
